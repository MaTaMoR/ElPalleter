---
// src/layouts/Layout.astro - Layout base con sistema de breakpoints integrado
export interface Props {
    title: string;
    description?: string;
}

const { 
    title, 
    description = "El Palleter - Aut√©ntica cocina mediterr√°nea en Benissa. Tapas y parrilla tradicional desde 1985." 
} = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content={description} />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        
        <!-- SEO Meta Tags -->
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:type" content="website" />
        <meta property="og:image" content="/og-image.jpg" />
        
        <!-- Twitter Card -->
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content={description} />
        
        <link rel="stylesheet" href="/src/styles/breakpoints.css">

        <title>{title}</title>
    </head>
    
    <body>
        <slot />
    </body>

    <!-- IMPORTAR SISTEMA DE BREAKPOINTS DESDE ARCHIVO EXTERNO -->
    <script type="module">
        // Importar el sistema desde el archivo dedicado
        import { 
            breakpointManager, 
            useBreakpoints, 
            disableTransitionsDuringResize 
        } from '../utils/breakpoint-manager.js';

        // Exportar al global para uso en otros scripts inline
        window.ElPalleterBreakpoints = {
            manager: breakpointManager,
            useBreakpoints: useBreakpoints,
            disableTransitionsDuringResize: disableTransitionsDuringResize,
            getCurrentBreakpoint: () => breakpointManager.getCurrentBreakpoint(),
            isMobile: () => breakpointManager.isMobile(),
            isTabletUp: () => breakpointManager.isTabletUp(),
            isDesktopUp: () => breakpointManager.isDesktopUp(),
            getInfo: () => breakpointManager.getBreakpointInfo()
        };

        // Auto-inicializar el sistema
        document.addEventListener('DOMContentLoaded', () => {
            breakpointManager.init();
            
            // Debug en desarrollo
            if (import.meta.env.DEV) {
                console.log('Sistema de Breakpoints iniciado:', breakpointManager.getBreakpointInfo());
                
                // Suscribirse para debug global
                breakpointManager.subscribe('layout-debug', {
                    onBreakpointChange: (newBreakpoint, oldBreakpoint) => {
                        console.log(`[LAYOUT] Breakpoint cambi√≥: ${oldBreakpoint} ‚Üí ${newBreakpoint}`);
                        console.log('Componentes suscritos:', breakpointManager.getBreakpointInfo().subscribers);
                        
                        // Actualizar indicador visual en desarrollo
                        if (document.body.hasAttribute('data-debug-breakpoints')) {
                            document.body.setAttribute('data-current-breakpoint', newBreakpoint);
                        }
                    }
                });
                
                // Habilitar debug visual
                document.body.setAttribute('data-debug-breakpoints', 'true');
                document.body.setAttribute('data-current-breakpoint', breakpointManager.getCurrentBreakpoint());
                
                // Funci√≥n de diagn√≥stico en consola
                window.debugBreakpoints = () => {
                    const info = breakpointManager.getBreakpointInfo();
                    console.table({
                        'Breakpoint Actual': info.current,
                        'Ancho de Ventana': info.width + 'px',
                        'Componentes Suscritos': info.subscribers,
                        'Sistema Inicializado': breakpointManager.isInitialized
                    });
                    
                    console.log('Breakpoints configurados:', info.breakpoints);
                    console.log('Componentes suscritos:', [...breakpointManager.subscribers.keys()]);
                };
            }
        });

        // Cleanup global al salir de la p√°gina
        window.addEventListener('beforeunload', () => {
            breakpointManager.cleanup();
        });
    </script>

    <script is:inline>
        // ‚úÖ Script centralizado para smooth scroll (TU C√ìDIGO ORIGINAL)
        document.addEventListener('DOMContentLoaded', () => {
            // Funci√≥n para obtener la altura del header din√°micamente
            const getHeaderHeight = () => {
                const header = document.querySelector('#header');
                return header ? header.getBoundingClientRect().height : 80; // Fallback a 80px
            };

            // Funci√≥n principal de smooth scroll CON offset del header
            const smoothScrollTo = (targetId) => {
                console.log(`Smooth scroll to: #${targetId}`); // Debug log
                
                const target = document.querySelector(`#${targetId}`);
                if (target) {
                    console.log(`Target encontrado:`, target); // Debug log
                    
                    // Obtener la altura actual del header
                    const headerHeight = getHeaderHeight();
                    
                    // Calcular posici√≥n con offset del header
                    const elementPosition = target.getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.pageYOffset - headerHeight;

                    window.scrollTo({
                        top: offsetPosition,
                        behavior: 'smooth'
                    });

                    // Usar un peque√±o delay para que el scroll termine antes de limpiar la URL
                    setTimeout(() => {
                        // Limpiar la URL sin afectar el historial
                        history.replaceState(null, null, window.location.pathname + window.location.search);
                    }, 100);
                } else {
                    console.error(`Target NO encontrado: #${targetId}`); // Debug log
                    
                    // Listar todas las secciones disponibles para debug
                    const allSections = document.querySelectorAll('section[id]');
                    console.log('Secciones disponibles:', 
                        Array.from(allSections).map(s => `#${s.id}`)
                    );
                }
            };

            // Funci√≥n para manejar todos los elementos con data-scroll-to
            const handleScrollElements = () => {
                const scrollElements = document.querySelectorAll('[data-scroll-to]');
                console.log(`Elementos con data-scroll-to encontrados: ${scrollElements.length}`); // Debug log
                
                scrollElements.forEach((element, index) => {
                    const target = element.getAttribute('data-scroll-to');
                    const exists = document.querySelector(`#${target}`) ? 'Exists' : 'Doesnt exist';
                    console.log(`${index + 1}. ${exists} data-scroll-to="${target}"`); // Debug log
                    
                    // Remover listeners existentes para evitar duplicados
                    element.removeEventListener('click', handleScrollClick);
                    element.addEventListener('click', handleScrollClick);
                });
            };

            // Handler para clicks de scroll
            const handleScrollClick = (e) => {
                console.log('üñ±Ô∏è Click en elemento data-scroll-to detectado'); // Debug log
                e.preventDefault();
                const targetId = e.currentTarget.getAttribute('data-scroll-to');
                if (targetId) {
                    smoothScrollTo(targetId);
                }
            };

            // Funci√≥n para manejar enlaces con href="#section"
            const handleNavLinks = () => {
                const navLinks = document.querySelectorAll('a[href^="#"]');
                navLinks.forEach(link => {
                    // Remover listeners existentes para evitar duplicados
                    link.removeEventListener('click', handleNavClick);
                    link.addEventListener('click', handleNavClick);
                });
            };

            // Handler para clicks de navegaci√≥n
            const handleNavClick = (e) => {
                console.log('Click en enlace href="#" detectado'); // Debug log
                e.preventDefault();
                const href = e.currentTarget.getAttribute('href');
                const targetId = href.substring(1); // Quitar el #
                if (targetId) {
                    smoothScrollTo(targetId);
                }
            };

            // Funci√≥n para manejar hash en la URL al cargar la p√°gina
            const handleInitialHash = () => {
                const hash = window.location.hash;
                if (hash) {
                    const targetId = hash.substring(1);
                    console.log(`üîó Hash inicial detectado: ${hash}`); // Debug log
                    // Peque√±o delay para asegurar que la p√°gina est√© completamente cargada
                    setTimeout(() => smoothScrollTo(targetId), 100);
                }
            };

            // Funci√≥n para manejar cambios en el hash de la URL
            const handleHashChange = () => {
                const hash = window.location.hash;
                if (hash) {
                    const targetId = hash.substring(1);
                    console.log(`Hash cambi√≥: ${hash}`); // Debug log
                    smoothScrollTo(targetId);
                }
            };

            // Funci√≥n para reinicializar todos los event listeners
            const initializeScrollBehavior = () => {
                handleScrollElements();
                handleNavLinks();
            };

            // Inicializar al cargar la p√°gina
            initializeScrollBehavior();
            handleInitialHash();

            // Escuchar cambios en el hash de la URL
            window.addEventListener('hashchange', handleHashChange);
        });
    </script>
</html>

<style is:global>
    /* Reset y estilos globales (TU C√ìDIGO ORIGINAL) */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    html {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        scroll-behavior: smooth;
    }
    
    body {
        margin: 0;
        padding: 0;
        overflow-x: hidden;
        line-height: 1.6;
        background-color: #C2C2C2;
    }
    
    /* ‚úÖ VARIABLES CSS PARA SISTEMA DE BREAKPOINTS */
    :root {
        /* Breakpoints */
        --breakpoint-mobile: 767px;
        --breakpoint-tablet: 1023px;
        --breakpoint-desktop: 1399px;
        
        /* Variables de padding y gap responsivas */
        --padding-mobile: 20px;
        --padding-tablet: 25px;
        --padding-desktop: 30px;
        
        --gap-mobile: 1rem;
        --gap-tablet: 1.5rem;
        --gap-desktop: 2rem;
        --gap-desktop-lg: 2.5rem;
    }
    
    /* Utilidades globales (TU C√ìDIGO ORIGINAL) */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }
    
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }
    
    /* ‚úÖ CLASE HELPER PARA DESHABILITAR TRANSICIONES DURANTE RESIZE */
    .no-transition,
    .no-transition *,
    .no-transition *:before,
    .no-transition *:after {
        transition: none !important;
        animation: none !important;
    }
    
    /* Animaciones globales (TU C√ìDIGO ORIGINAL) */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes slideInFromLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideInFromRight {
        from {
            opacity: 0;
            transform: translateX(30px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    /* Clases de utilidad para animaciones (TU C√ìDIGO ORIGINAL) */
    .fade-in {
        animation: fadeIn 0.6s ease-out;
    }
    
    .slide-in-left {
        animation: slideInFromLeft 0.6s ease-out;
    }
    
    .slide-in-right {
        animation: slideInFromRight 0.6s ease-out;
    }
    
    /* Focus styles para accesibilidad (TU C√ìDIGO ORIGINAL) */
    button:focus-visible,
    a:focus-visible {
        outline: 2px solid #f4a261;
        outline-offset: 2px;
    }
    
    /* Smooth scroll para Safari (TU C√ìDIGO ORIGINAL) */
    @media (prefers-reduced-motion: no-preference) {
        html {
            scroll-behavior: smooth;
        }
    }
    
    /* Respetar preferencias de movimiento reducido (TU C√ìDIGO ORIGINAL) */
    @media (prefers-reduced-motion: reduce) {
        *,
        *::before,
        *::after {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }
    
    /* ESTILOS DE DEBUG PARA DESARROLLO */
    body[data-debug-breakpoints="true"] {
        position: relative;
    }
    
    body[data-debug-breakpoints="true"]:before {
        content: attr(data-current-breakpoint);
        position: fixed;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 5px 10px;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
        z-index: 10000;
        pointer-events: none;
        border: 1px solid #f4a261;
    }
</style>