---
// src/components/public/Hero.astro - Versión actualizada para sistema dinámico
import Text from '../i18n/Text.astro';
import { getResponsiveBackgroundImage, getImagePreloadData } from '../../utils/imageUtils.js';

// 🎯 NUEVO: Obtener la imagen hero principal del sistema dinámico
const heroImageData = await getResponsiveBackgroundImage('hero_main', Astro);
const preloadData = heroImageData ? await getImagePreloadData('hero_main', Astro) : [];

// 🔍 Debug en desarrollo
if (import.meta.env.DEV) {
    console.log('📸 Hero: Imagen cargada:', {
        found: !!heroImageData,
        id: heroImageData?.id,
        responsive: !!heroImageData?.responsive,
        preloads: preloadData.length
    });
}

// Fallback si no hay imagen configurada
const defaultHeroImage = '/images/hero/hero-desktop-1920w.jpg';
---

<!-- Preload crítico de imágenes (solo si tenemos imagen responsiva) -->
{preloadData.map(preload => (
    <link 
        rel="preload" 
        href={preload.href} 
        as={preload.as}
        media={preload.media}
        fetchpriority="high"
    />
))}

<section class="hero-section" id="hero">
    <!-- Background responsivo -->
    <div class="hero-background" aria-hidden="true"></div>
    
    <!-- Overlay para mejor legibilidad -->
    <div class="hero-overlay"></div>
    
    <!-- Contenido del hero -->
    <div class="hero-content">
        <div class="hero-text">
            <h1 class="hero-title">
                <Text key="hero.title" fallback="Bienvenido a El Palleter" />
            </h1>
            <p class="hero-subtitle">
                <Text key="hero.subtitle" fallback="Tradición culinaria desde 1985 en el corazón de Benissa" />
            </p>
            <div class="hero-actions">
                <a href="#carta" class="hero-btn primary">
                    <Text key="hero.btn_menu" fallback="Ver Carta" />
                </a>
                <a href="#reservas" class="hero-btn secondary">
                    <Text key="hero.btn_reserve" fallback="Reservar Mesa" />
                </a>
            </div>
        </div>
    </div>
    
    <!-- Fallback message si no hay imagen (solo en desarrollo) -->
    {!heroImageData && import.meta.env.DEV && (
        <div class="hero-debug-notice">
            <p>⚠️ No se encontró 'hero_main' en imageConfig.json</p>
            <small>Agrega con: node scripts/image-manager.js add imagen.jpg hero_main hero</small>
        </div>
    )}
</section>

<style define:vars={{ 
    heroMobile: heroImageData?.responsive?.mobile || defaultHeroImage,
    heroTablet: heroImageData?.responsive?.tablet || defaultHeroImage,
    heroDesktop: heroImageData?.responsive?.desktop || defaultHeroImage,
    heroXL: heroImageData?.responsive?.desktop_xl || defaultHeroImage,
    heroFallback: heroImageData?.fallback || defaultHeroImage
}}>
    /* === HERO SECTION === */
    .hero-section {
        position: relative;
        height: 100vh;
        min-height: 600px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        isolation: isolate;
    }

    /* === BACKGROUND RESPONSIVO DINÁMICO === */
    .hero-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        
        /* Imagen fallback por defecto */
        background-image: url(var(--heroFallback));
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        
        /* Optimización de rendimiento */
        transform: translate3d(0, 0, 0);
        backface-visibility: hidden;
        will-change: transform;
    }

    /* 🎯 NUEVO: Imágenes responsivas inyectadas dinámicamente via CSS vars */
    
    /* Mobile optimizado */
    @media (max-width: 767px) {
        .hero-background {
            background-image: url(var(--heroMobile));
            background-attachment: scroll; /* Mejor performance en móvil */
        }
    }
    
    /* Tablet optimizado */
    @media (min-width: 768px) and (max-width: 1023px) {
        .hero-background {
            background-image: url(var(--heroTablet));
        }
    }
    
    /* Desktop optimizado */
    @media (min-width: 1024px) and (max-width: 1399px) {
        .hero-background {
            background-image: url(var(--heroDesktop));
        }
    }
    
    /* Desktop XL/4K optimizado */
    @media (min-width: 1400px) {
        .hero-background {
            background-image: url(var(--heroXL));
        }
    }

    /* === OVERLAY === */
    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            135deg,
            rgba(0, 0, 0, 0.4) 0%,
            rgba(0, 0, 0, 0.2) 50%,
            rgba(0, 0, 0, 0.6) 100%
        );
        z-index: 2;
    }

    /* === CONTENIDO === */
    .hero-content {
        position: relative;
        z-index: 3;
        text-align: center;
        color: white;
        max-width: 800px;
        padding: 0 var(--padding-mobile);
    }

    .hero-text {
        opacity: 0;
        transform: translateY(30px);
        animation: fadeInUp 1s ease-out 0.5s forwards;
    }

    .hero-title {
        font-size: clamp(2.5rem, 5vw, 4rem);
        font-weight: 700;
        margin-bottom: 1rem;
        line-height: 1.2;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .hero-subtitle {
        font-size: clamp(1.1rem, 2.5vw, 1.4rem);
        margin-bottom: 2rem;
        opacity: 0.9;
        line-height: 1.5;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    /* === BOTONES === */
    .hero-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .hero-btn {
        display: inline-block;
        padding: 0.8rem 2rem;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.3s ease;
        min-width: 150px;
        text-align: center;
    }

    .hero-btn.primary {
        background: linear-gradient(135deg, #f4a261 0%, #e76f51 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(244, 162, 97, 0.4);
    }

    .hero-btn.primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(244, 162, 97, 0.6);
    }

    .hero-btn.secondary {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 2px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(10px);
    }

    .hero-btn.secondary:hover {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.5);
        transform: translateY(-2px);
    }

    /* === DEBUG NOTICE (solo desarrollo) === */
    .hero-debug-notice {
        position: absolute;
        bottom: 20px;
        left: 20px;
        z-index: 10;
        background: rgba(255, 193, 7, 0.9);
        color: #333;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.8rem;
        max-width: 300px;
    }

    .hero-debug-notice small {
        display: block;
        margin-top: 0.25rem;
        font-family: 'Courier New', monospace;
        font-size: 0.7rem;
    }

    /* === ANIMACIONES === */
    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* === RESPONSIVE === */
    @media (max-width: 767px) {
        .hero-section {
            min-height: 500px;
            height: 100svh; /* Usar viewport units seguros en móvil */
        }
        
        .hero-actions {
            flex-direction: column;
            align-items: center;
        }
        
        .hero-btn {
            width: 100%;
            max-width: 250px;
        }
        
        .hero-debug-notice {
            position: relative;
            margin-top: 2rem;
            left: auto;
            bottom: auto;
        }
    }

    @media (max-width: 480px) {
        .hero-content {
            padding: 0 1rem;
        }
    }

    /* === OPTIMIZACIONES DE PERFORMANCE === */
    @media (prefers-reduced-motion: reduce) {
        .hero-text {
            animation: none;
            opacity: 1;
            transform: none;
        }
        
        .hero-btn {
            transition: none;
        }
        
        .hero-background {
            background-attachment: scroll;
        }
    }

    /* === SOPORTE PARA DARK MODE === */
    @media (prefers-color-scheme: dark) {
        .hero-overlay {
            background: linear-gradient(
                135deg,
                rgba(0, 0, 0, 0.6) 0%,
                rgba(0, 0, 0, 0.4) 50%,
                rgba(0, 0, 0, 0.7) 100%
            );
        }
    }
</style>

<script>
    // Lazy loading adicional para imágenes no críticas
    document.addEventListener('DOMContentLoaded', () => {
        const heroBackground = document.querySelector('.hero-background');
        
        if (heroBackground) {
            // Observar cuando el hero está visible para cargar imágenes adicionales
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        // Precargar imagen de siguiente sección si es necesario
                        prefetchNextSectionImages();
                        observer.unobserve(entry.target);
                    }
                });
            });
            
            observer.observe(heroBackground);
        }
        
        // Optimización: pausar animaciones cuando no están visibles
        handleVisibilityChange();
    });
    
    function prefetchNextSectionImages() {
        // Precargar imágenes de la siguiente sección visible (historia)
        // Esto mejora la transición entre secciones
        const nextImages = [
            '/images/historia/hist_001-mobile-800w.jpg', // Primeras imágenes de historia
            '/images/historia/hist_001-tablet-1200w.jpg'
        ];
        
        nextImages.forEach(src => {
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = src;
            link.as = 'image';
            document.head.appendChild(link);
        });
    }
    
    function handleVisibilityChange() {
        document.addEventListener('visibilitychange', () => {
            const heroBackground = document.querySelector('.hero-background');
            if (heroBackground) {
                if (document.hidden) {
                    // Pausar animaciones cuando la página no es visible
                    heroBackground.style.animationPlayState = 'paused';
                } else {
                    heroBackground.style.animationPlayState = 'running';
                }
            }
        });
    }
    
    // 🔍 Debug helper en desarrollo
    if (import.meta.env.DEV) {
        window.heroDebug = {
            checkImages: () => {
                const bg = getComputedStyle(document.querySelector('.hero-background'));
                console.log('🎯 Hero current background:', bg.backgroundImage);
                
                // Verificar qué imagen se está usando en cada breakpoint
                const breakpoints = [
                    { name: 'mobile', media: '(max-width: 767px)' },
                    { name: 'tablet', media: '(min-width: 768px) and (max-width: 1023px)' },
                    { name: 'desktop', media: '(min-width: 1024px) and (max-width: 1399px)' },
                    { name: 'xl', media: '(min-width: 1400px)' }
                ];
                
                breakpoints.forEach(bp => {
                    if (window.matchMedia(bp.media).matches) {
                        console.log(`📱 Current breakpoint: ${bp.name}`);
                    }
                });
            }
        };
        
        // Ejecutar debug después de cargar
        setTimeout(() => window.heroDebug?.checkImages(), 1000);
    }
</script>