---
import ImageSlider from './ImageSlider.astro';
import Text from '../i18n/Text.astro';
import RichText from '../i18n/RichText.astro';
import { getGalleryImages } from '../../utils/imageUtils.js';

// 🎯 ACTUALIZADO: Usar nuevo sistema simplificado
const imagesToShow = await getGalleryImages('historia', Astro);

// 🔍 Debug en desarrollo
if (import.meta.env.DEV) {
    console.log('📸 Historia: Imágenes cargadas:', {
        count: imagesToShow.length,
        images: imagesToShow.map(img => ({ id: img.id, name: img.alt }))
    });
}
---

<section class="historia-section" id="historia">
    <div class="historia-header">
        <h2 class="historia-title">
            <Text key="story.title" fallback="Historia" />
        </h2>
        <p class="historia-subtitle">
            <Text key="story.subtitle" fallback="Desde 1985 en el corazón de Benissa con mucho orgullo" />
        </p>
    </div>
    <div class="historia-container container">
        <!-- Historia a la izquierda -->
        <div class="history-content">
            <RichText 
                key="historia_content" 
                fallback={'Historia no disponible'}
                className="historia-rich-content"
                theme="gold"
            />
        </div>
    
        <!-- Slider de fotos a la derecha -->
        <div class="slider-section">
            {/* 🎯 MEJORADO: Fallback más elegante si no hay imágenes */}
            {imagesToShow && imagesToShow.length > 0 ? (
                <ImageSlider images={imagesToShow} />
            ) : (
                <div class="no-images-fallback">
                    <div class="fallback-content">
                        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                            <circle cx="8.5" cy="8.5" r="1.5"/>
                            <polyline points="21,15 16,10 5,21"/>
                        </svg>
                        <p>
                            <Text key="historia.no_images" fallback="Imágenes no disponibles" />
                        </p>
                        {import.meta.env.DEV && (
                            <small>Configura en galleries.json</small>
                        )}
                    </div>
                </div>
            )}
        </div>
    </div>
</section>

<style>
    /* === RESTO DEL CSS EXACTAMENTE IGUAL === */
    /* === SECCIÓN BASE  === */
    .historia-section {
        width: 100%;
        height: fit-content;
        display: flex;
        align-items: stretch;
        position: relative;
        overflow: hidden;
        box-sizing: border-box;
        flex-direction: column;
    }

    .historia-header {
        text-align: center;
        margin-bottom: calc(var(--gap-mobile) * 3);
    }

    .historia-title {
        font-size: clamp(2rem, 4vw, 3.5rem);
        font-weight: 300;
        color: #f4a261;
        margin-bottom: var(--gap-mobile);
        letter-spacing: 2px;
    }

    .historia-subtitle {
        font-size: 1.1rem;
        color: #ccc;
        opacity: 0.8;
    }

    /* === CONTAINER USANDO SISTEMA GLOBAL === */
    .historia-container {
        height: 660px;
        display: flex;
        flex-direction: row;
        gap: var(--gap-mobile);
        position: relative;
        z-index: 2;
        /* 🎯 SOLUCIÓN: Prevenir overflow durante carga inicial */
        overflow: hidden;
    }

    /* === CONTENT SECTIONS - SIN BACKGROUND DUPLICADO === */
    .history-content {
        flex: 1.2;
        padding: var(--padding-mobile);
        display: flex;
        flex-direction: column;
        justify-content: center;
        
        /* MANTENIDO: Estilos específicos del contenido */
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(15px);
        -webkit-backdrop-filter: blur(15px);
        border-radius: 20px;
        border: 1px solid rgba(244, 162, 97, 0.2);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        height: 100%;
        
        min-height: 0;
        max-height: 100%;
        
        /* SISTEMA DE ANIMACIÓN UNIFICADO */
        opacity: 0;
        transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .slider-section {
        flex: 1.3;
        height: 100%;
        display: grid;
        place-items: center;
        
        background: rgba(0, 0, 0, 0.4);
        border-radius: 20px;
        border: 1px solid rgba(244, 162, 97, 0.15);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
        overflow: hidden;
        transform: translate3d(0, 0, 0);
        backface-visibility: hidden;
        isolation: isolate;
        contain: layout style;
        
        min-height: 0;
        max-height: 100%;
        
        /* SISTEMA DE ANIMACIÓN UNIFICADO */
        opacity: 0;
        transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* === NUEVO: Fallback para cuando no hay imágenes === */
    .no-images-fallback {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: rgba(244, 162, 97, 0.6);
    }

    .fallback-content {
        text-align: center;
        padding: 2rem;
    }

    .fallback-content svg {
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .fallback-content p {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        color: rgba(244, 162, 97, 0.8);
    }

    .fallback-content small {
        font-size: 0.9rem;
        opacity: 0.6;
        font-family: 'Courier New', monospace;
    }

    /* === ANIMACIONES ACTIVAS === */
    .history-content.slide-in-active {
        opacity: 1;
    }

    .slider-section.slide-in-active {
        opacity: 1;
        transition-delay: 0.2s;
    }

    .history-content :global(.historia-rich-content) {
        width: 100%;
        max-width: 100%;
        overflow-wrap: break-word;
        word-wrap: break-word;
        hyphens: auto;
    }

    .history-content :global(.historia-rich-content p),
    .history-content :global(.historia-rich-content div),
    .history-content :global(.historia-rich-content span) {
        max-width: 100%;
        overflow-wrap: break-word;
    }

    /* === RESPONSIVE - ENFOCADO EN LAYOUT INTERNO === */
    
    /* TABLET Y SUPERIOR (768px+) */
    @media (min-width: 768px) {
        .historia-container {
            gap: var(--gap-tablet);
        }
        
        .history-content {
            padding: var(--padding-tablet);
        }
        
        .slider-section {
            /* Asegurar que use todo el height disponible en desktop */
            height: 100%;
            min-height: auto; /* Resetear min-height de móvil */
        }
        
        .history-content:not(.slide-in-active) {
            transform: translateX(-60px);
            transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                       transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .slider-section:not(.slide-in-active) {
            transform: translateX(60px);
            transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                       transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .history-content.slide-in-active {
            opacity: 1;
            transform: translateX(0);
        }

        .slider-section.slide-in-active {
            opacity: 1;
            transform: translateX(0);
            transition-delay: 0.2s;
        }
    }

    /* DESKTOP (1024px+) */
    @media (min-width: 1024px) {
        .historia-container {
            gap: var(--gap-desktop);
        }
        
        .history-content {
            padding: var(--padding-desktop);
        }
    }

    /* DESKTOP LARGE (1400px+) */
    @media (min-width: 1400px) {
        .historia-container {
            gap: var(--gap-desktop-lg);
        }
    }

    /* MOBILE (0-767px) */
    @media (max-width: 767px) {
        .historia-section {
            min-height: auto;
            max-height: none;
            display: block;
            align-items: unset;
        }
        
        .historia-container {
            flex-direction: column;
            height: auto;
            gap: calc(var(--gap-mobile) * 1.5);
        }
        
        .history-content {
            order: 2;
            padding: var(--padding-mobile);
            height: auto;
        }
        
        .slider-section {
            order: 1;
            min-height: 40vh;
            height: 40vh;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            border: 1px solid rgba(244, 162, 97, 0.2);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            transform: translate3d(0, 0, 0);
        }
        
        /* Animaciones móvil */
        .slider-section:not(.slide-in-active) {
            transform: translateY(-30px);
            transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                       transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .history-content:not(.slide-in-active) {
            transform: translateY(30px);
            transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), 
                       transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .slider-section.slide-in-active {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.1s;
        }
        
        .history-content.slide-in-active {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.3s;
        }
    }

    /* MOBILE PEQUEÑO (0-420px) */
    @media (max-width: 420px) {
        .historia-container {
            gap: calc(var(--gap-mobile) * 1.5);
        }
        
        .slider-section {
            min-height: 35vh;
            height: 35vh;
        }
        
        .history-content {
            border-radius: 15px;
        }
    }
</style>

<script>
    import { useBreakpoints, disableTransitionsDuringResize } from '../../utils/breakpoints.js';
    
    document.addEventListener('DOMContentLoaded', () => {
        const historyContent = document.querySelector('.history-content');
        const sliderSection = document.querySelector('.slider-section');
        const historiaSection = document.querySelector('.historia-section');
        
        // SIMPLIFICADO: Ya no necesita gestionar el elemento sección principal
        const breakpoints = useBreakpoints('historia-component', {
            element: historiaSection
        });
        
        // 🎯 SOLUCIÓN: Asegurar que el layout esté estable antes de observar
        const initializeWhenReady = () => {
            // Esperar a que las imágenes y contenido estén listos
            setTimeout(() => {
                // Marcar como cargado para mostrar el contenedor
                if (historiaSection) {
                    historiaSection.classList.add('loaded');
                }
                
                // Observer para animaciones de entrada
                const observerOptions = {
                    threshold: 0.15,
                    rootMargin: '0px 0px -50px 0px'
                };

                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('slide-in-active');
                        }
                    });
                }, observerOptions);

                if (historyContent) observer.observe(historyContent);
                if (sliderSection) observer.observe(sliderSection);
                
                // Cleanup al descargar
                window.addEventListener('beforeunload', () => {
                    observer.disconnect();
                });
            }, 150);
        };
        
        // Suscribirse a cambios de breakpoint
        breakpoints.subscribe({
            onBreakpointChange: (newBreakpoint, oldBreakpoint) => {
                console.log(`Historia: Breakpoint changed ${oldBreakpoint} → ${newBreakpoint}`);
                
                const elementsToAdjust = [historyContent, sliderSection].filter(Boolean);
                disableTransitionsDuringResize(elementsToAdjust);
            }
        });
        
        // Inicializar cuando esté listo
        initializeWhenReady();
        
        // Cleanup
        window.addEventListener('beforeunload', () => {
            breakpoints.unsubscribe();
        });
    });
</script>