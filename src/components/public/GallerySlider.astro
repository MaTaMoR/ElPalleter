---
import Text from '../i18n/Text.astro';
import { I18nConfig } from '../../i18n/config';

// Importar la configuración de la galería
import galleryConfig from '../../data/gallery.json';

// Obtener el idioma de la URL o contexto
const language = Astro.url.pathname.startsWith('/en/') ? 'en' :
                Astro.url.pathname.startsWith('/ca/') ? 'ca' : 'es';

const i18n = I18nConfig.getInstance();
await i18n.loadTranslations();

// Filtrar y ordenar imágenes activas
const activeImages = galleryConfig.images
  .filter(img => img.active)
  .sort((a, b) => a.order - b.order);

// Función helper para obtener traducciones
function getTranslation(key: string): string {
  return i18n.getTranslation(key, language) || key;
}

const { settings } = galleryConfig;
---

<div class="gallery-slider" data-autoplay={settings.autoplay} data-interval={settings.interval}>
  <div class="slider-container">
    <div class="slides-wrapper">
      {activeImages.map((image, index) => (
        <div 
          class={`slide ${index === 0 ? 'active' : ''}`}
          data-slide={index}
          data-category={image.category}
        >
          <img 
            src={image.endpoint}
            alt={getTranslation(image.altKey)}
            title={getTranslation(image.titleKey)}
            loading={index === 0 ? 'eager' : 'lazy'}
            class="slide-image"
          />
          <div class="slide-overlay">
            <h3 class="slide-title">
              {getTranslation(image.titleKey)}
            </h3>
          </div>
        </div>
      ))}
    </div>
    
    {settings.showArrows && (
      <>
        <button class="slider-arrow slider-arrow-prev" aria-label="Imagen anterior">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="slider-arrow slider-arrow-next" aria-label="Siguiente imagen">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </>
    )}
  </div>
  
  {settings.showIndicators && (
    <div class="slider-indicators">
      {activeImages.map((_, index) => (
        <button 
          class={`indicator ${index === 0 ? 'active' : ''}`}
          data-slide={index}
          aria-label={`Ir a imagen ${index + 1}`}
        ></button>
      ))}
    </div>
  )}
</div>

<style>
  .gallery-slider {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  }
  
  .slider-container {
    position: relative;
    height: 500px;
    overflow: hidden;
  }
  
  .slides-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.6s ease-in-out;
  }
  
  .slide.active {
    opacity: 1;
  }
  
  .slide-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  .slide-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0,0,0,0.7));
    padding: 2rem;
    color: white;
  }
  
  .slide-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
  }
  
  .slider-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255,255,255,0.9);
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    color: #2c5530;
  }
  
  .slider-arrow:hover {
    background: white;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  }
  
  .slider-arrow-prev {
    left: 1rem;
  }
  
  .slider-arrow-next {
    right: 1rem;
  }
  
  .slider-indicators {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    padding: 1rem;
    background: rgba(255,255,255,0.95);
  }
  
  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: none;
    background: #ddd;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .indicator.active {
    background: #8b5a3c;
    transform: scale(1.2);
  }
  
  .indicator:hover {
    background: #2c5530;
  }
  
  @media (max-width: 768px) {
    .slider-container {
      height: 300px;
    }
    
    .slide-overlay {
      padding: 1rem;
    }
    
    .slide-title {
      font-size: 1.2rem;
    }
    
    .slider-arrow {
      width: 40px;
      height: 40px;
    }
    
    .slider-arrow-prev {
      left: 0.5rem;
    }
    
    .slider-arrow-next {
      right: 0.5rem;
    }
  }
</style>

<script>
  class GallerySlider {
    constructor(element) {
      this.slider = element;
      this.slides = element.querySelectorAll('.slide');
      this.indicators = element.querySelectorAll('.indicator');
      this.prevBtn = element.querySelector('.slider-arrow-prev');
      this.nextBtn = element.querySelector('.slider-arrow-next');
      this.currentSlide = 0;
      this.autoplay = element.dataset.autoplay === 'true';
      this.interval = parseInt(element.dataset.interval) || 4000;
      this.autoplayTimer = null;
      
      this.init();
    }
    
    init() {
      // Event listeners para navegación
      if (this.prevBtn) {
        this.prevBtn.addEventListener('click', () => this.previousSlide());
      }
      
      if (this.nextBtn) {
        this.nextBtn.addEventListener('click', () => this.nextSlide());
      }
      
      // Event listeners para indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Autoplay
      if (this.autoplay) {
        this.startAutoplay();
        
        // Pausar autoplay al hover
        this.slider.addEventListener('mouseenter', () => this.stopAutoplay());
        this.slider.addEventListener('mouseleave', () => this.startAutoplay());
      }
      
      // Navegación con teclado
      this.slider.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.previousSlide();
        if (e.key === 'ArrowRight') this.nextSlide();
      });
      
      // Hacer el slider focusable
      this.slider.setAttribute('tabindex', '0');
    }
    
    goToSlide(index) {
      // Remover clase active de slide e indicator actuales
      this.slides[this.currentSlide].classList.remove('active');
      this.indicators[this.currentSlide].classList.remove('active');
      
      // Actualizar índice actual
      this.currentSlide = index;
      
      // Añadir clase active al nuevo slide e indicator
      this.slides[this.currentSlide].classList.add('active');
      this.indicators[this.currentSlide].classList.add('active');
    }
    
    nextSlide() {
      const nextIndex = (this.currentSlide + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }
    
    previousSlide() {
      const prevIndex = (this.currentSlide - 1 + this.slides.length) % this.slides.length;
      this.goToSlide(prevIndex);
    }
    
    startAutoplay() {
      if (this.autoplay && this.slides.length > 1) {
        this.autoplayTimer = setInterval(() => {
          this.nextSlide();
        }, this.interval);
      }
    }
    
    stopAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }
  }
  
  // Inicializar todos los sliders en la página
  document.addEventListener('DOMContentLoaded', () => {
    const sliders = document.querySelectorAll('.gallery-slider');
    sliders.forEach(slider => new GallerySlider(slider));
  });
</script>