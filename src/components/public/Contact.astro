---
import Text from '../i18n/Text.astro';
import contactData from '../../data/contact-data.json';
import { i18nCore } from '../../i18n/core.js';
import { ContactService } from '../../services/ContactService.js';

// Obtener información de i18n
const { locale } = i18nCore.getI18nInfo(Astro);

// Obtener datos del servicio actualizado
const contactServiceData = ContactService.getContactDataWithTranslations(i18nCore, locale);
const currentStatus = contactServiceData.status;
const fullAddress = contactServiceData.fullAddress;
const socialNetworks = contactServiceData.socials;
const groupedSchedule = ContactService.getGroupedSchedule(locale); // NUEVO: horarios agrupados
---

<section class="contact-section" id="contacto">
    <div class="contact-container container">
        <!-- Componente de Contacto -->
        <div class="contact-component">
            <!-- Cabecera con Status -->
            <div class="top-bar">
                <div class="mini-brand">
                    {contactData.config.showLogo && (
                        <div class="logo-container">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 55" width="45" height="32">
                                <defs>
                                    <clipPath id="topHalf">
                                        <rect x="0" y="0" width="80" height="27"/>
                                    </clipPath>
                                    <clipPath id="bottomHalf">
                                        <rect x="0" y="33" width="80" height="24"/>
                                    </clipPath>
                                </defs>
                                <text x="20" y="45" text-anchor="middle" font-family="serif" font-size="50" font-weight="900" fill="#f4a261" clip-path="url(#topHalf)">E</text>
                                <text x="60" y="45" text-anchor="middle" font-family="serif" font-size="50" font-weight="900" fill="#f4a261" clip-path="url(#topHalf)">P</text>
                                <text x="20" y="45" text-anchor="middle" font-family="serif" font-size="50" font-weight="900" fill="#f4a261" clip-path="url(#bottomHalf)">E</text>
                                <text x="60" y="45" text-anchor="middle" font-family="serif" font-size="50" font-weight="900" fill="#f4a261" clip-path="url(#bottomHalf)">P</text>
                                <line x1="0" y1="30" x2="80" y2="30" stroke="#f4a261" stroke-width="1"/>
                            </svg>
                        </div>
                    )}
                    <span class="brand-text">
                        <Text key="contact.brand.name" fallback={contactData.restaurant.name} />
                    </span>
                </div>
                {contactData.config.showStatus && (
                    <div class={`status status-${currentStatus.status}`} id="restaurantStatus">
                        <div class="status-dot"></div>
                        <span id="statusText" class="status-message">
                            {currentStatus.fullMessage || "No Disponible"}
                        </span>
                    </div>
                )}
            </div>

            <!-- Contenido de Contacto -->
            <div class="contact-content">
                <div class="contact-grid">
                    <!-- Sección de Dirección -->
                    <div class="contact-info-section">
                        <h4>
                            📍 <Text key="contact.sections.address" fallback="Dirección" />
                        </h4>
                        <p>{contactData.contact.address.street}</p>
                        <p>{contactData.contact.address.postalCode} {contactData.contact.address.city}</p>
                        <p>{contactData.contact.address.province}, {contactData.contact.address.country}</p>
                    </div>

                    <!-- Sección de Contacto -->
                    <div class="contact-info-section">
                        <h4>
                            📞 <Text key="contact.sections.phone" fallback="Contacto" />
                        </h4>
                        <p>
                            <strong><Text key="contact.fields.phone" fallback="Teléfono" />:</strong> 
                            <a href={`tel:${contactData.contact.phone.main}`}>{contactData.contact.phone.main}</a>
                        </p>
                        <p>
                            <strong><Text key="contact.fields.email" fallback="Email" />:</strong> 
                            <a href={`mailto:${contactData.contact.email.main}`}>{contactData.contact.email.main}</a>
                        </p>
                        <p>
                            <strong><Text key="contact.fields.website" fallback="Web" />:</strong> 
                            <a href={contactData.contact.website} target="_blank" rel="noopener">elpalleter.com</a>
                        </p>
                    </div>

                    <!-- Sección de Horarios ACTUALIZADA -->
                    <div class="contact-info-section">
                        <h4>
                            🕒 <Text key="contact.sections.hours" fallback="Horarios" />
                        </h4>
                        {groupedSchedule.map((group) => (
                            <div class="schedule-group">
                                <p class="schedule-days">
                                    <strong>{group.daysDisplay}:</strong>
                                </p>
                                {group.closed ? (
                                    <p class="schedule-closed">
                                        <Text key="contact.status.states.closed" fallback="Cerrado" />
                                    </p>
                                ) : (
                                    <div class="schedule-ranges">
                                        {group.ranges.map((range) => (
                                            <p class="schedule-range">
                                                {range.translatedName && (
                                                    <span class="range-name">{range.translatedName}: </span>
                                                )}
                                                <span class="range-time">{range.start} - {range.end}</span>
                                            </p>
                                        ))}
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>

                    <!-- Sección de Redes Sociales -->
                    {contactData.config.showSocial && (
                        <div class="contact-info-section">
                            <h4>
                                🌐 <Text key="contact.sections.social" fallback="Síguenos" />
                            </h4>
                            <p>
                                <Text key="contact.values.followUs" fallback="Mantente al día con nuestras novedades" />
                            </p>
                            <div class="social-links">
                                {socialNetworks.map((social) => (
                                    <a 
                                        href={social.url} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        title={social.handle}
                                        aria-label={`<Text key="contact.accessibility.${social.key}" fallback={social.key} />`}
                                    >
                                        {social.icon}
                                    </a>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    /* === CONTACT SECTION BASE - MISMO TAMAÑO QUE OTROS COMPONENTES === */
    .contact-section {
        width: 100%;
        background: rgb(20, 20, 20); /* MISMO FONDO que Historia/Carta */
        /* 🔥 MISMO PADDING que otros componentes principales */
        padding: calc(var(--padding-mobile) * 6) 0 calc(var(--padding-mobile) * 3) 0;
        position: relative;
        z-index: 2;
    }

    /* 🔥 MISMO EFECTO DE PARTÍCULAS que otros componentes */
    .contact-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: radial-gradient(circle at 25% 25%, #f4a261 1px, transparent 1px),
                          radial-gradient(circle at 75% 75%, #f4a261 1px, transparent 1px),
                          radial-gradient(circle at 40% 80%, #f4a261 1px, transparent 1px);
        background-size: 120px 120px, 150px 150px, 100px 100px;
        opacity: 0.15;
        animation: float 25s ease-in-out infinite;
        z-index: 1;
    }

    @keyframes float {
        0%, 100% { transform: translateY(0px) translateX(0px); }
        25% { transform: translateY(-15px) translateX(5px); }
        50% { transform: translateY(-25px) translateX(-10px); }
        75% { transform: translateY(-10px) translateX(8px); }
    }

    .contact-container {
        position: relative;
        z-index: 2;
    }

    /* === COMPONENTE PRINCIPAL - SIN HOVER === */
    .contact-component {
        background: rgba(0, 0, 0, 0.6); /* Mismo que otros componentes */
        border-radius: 20px;
        overflow: hidden;
        border: 2px solid rgba(244, 162, 97, 0.2);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
        max-width: 1000px;
        margin: 0 auto;
        /* 🔥 REMOVIDO: No hay hover effects */
    }

    /* === CABECERA CON STATUS === */
    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: rgba(0, 0, 0, 0.4);
        padding: calc(var(--padding-mobile) * 1.25) calc(var(--padding-mobile) * 1.5);
        border-bottom: 1px solid rgba(244, 162, 97, 0.3);
    }

    .mini-brand {
        display: flex;
        align-items: center;
        gap: calc(var(--gap-mobile) * 0.75);
    }

    .logo-container {
        width: 45px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .logo-container svg {
        width: 45px;
        height: 32px;
    }

    .brand-text {
        color: #f4a261;
        font-size: 1.3rem;
        font-weight: 500;
        letter-spacing: 1px;
    }

    /* === STATUS INDICATOR === */
    .status {
        background: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
        padding: calc(var(--padding-mobile) * 0.5) calc(var(--padding-mobile) * 1);
        border-radius: 20px;
        font-size: 0.9rem;
        border: 1px solid #4CAF50;
        display: flex;
        align-items: center;
        gap: calc(var(--gap-mobile) * 0.5);
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        background: #4CAF50;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }

    /* Estados del status */
    .status.status-closed {
        background: rgba(244, 67, 54, 0.2);
        color: #f44336;
        border-color: #f44336;
    }

    .status.status-closed .status-dot {
        background: #f44336;
    }

    .status.status-closingSoon {
        background: rgba(255, 193, 7, 0.2);
        color: #FFC107;
        border-color: #FFC107;
    }

    .status.status-closingSoon .status-dot {
        background: #FFC107;
    }

    /* === CONTENIDO DE CONTACTO === */
    .contact-content {
        padding: calc(var(--padding-mobile) * 3); /* 🔥 AUMENTADO para igualar otros componentes */
    }

    .contact-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: calc(var(--gap-mobile) * 2.5); /* 🔥 AUMENTADO el gap */
    }

    /* === SECCIONES DE INFORMACIÓN - SIN HOVER === */
    .contact-info-section {
        padding: calc(var(--padding-mobile) * 1.5); /* 🔥 AUMENTADO padding */
        border: 1px solid transparent;
        border-radius: 15px;
        background: rgba(244, 162, 97, 0.05);
        /* 🔥 REMOVIDO: No hay hover effects ni transformaciones */
    }

    .contact-info-section h4 {
        color: #f4a261;
        font-size: 1.3rem;
        margin-bottom: calc(var(--gap-mobile) * 1.2); /* 🔥 AUMENTADO margen */
        border-bottom: 2px solid rgba(244, 162, 97, 0.3);
        padding-bottom: calc(var(--padding-mobile) * 0.5);
        display: flex;
        align-items: center;
        gap: calc(var(--gap-mobile) * 0.6);
    }

    .contact-info-section p {
        color: #ccc;
        margin-bottom: calc(var(--gap-mobile) * 0.75);
        font-size: 1rem;
        line-height: 1.5;
    }

    .contact-info-section p:last-child {
        margin-bottom: 0;
    }

    .contact-info-section strong {
        color: #fff;
        font-weight: 600;
    }

    /* Enlaces */
    .contact-info-section a {
        color: #f4a261;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .contact-info-section a:hover {
        color: #fff;
        text-decoration: underline;
    }

    /* === HORARIOS ACTUALIZADOS === */
    .schedule-group {
        margin-bottom: calc(var(--gap-mobile) * 1);
    }

    .schedule-group:last-child {
        margin-bottom: 0;
    }

    .schedule-days {
        margin-bottom: calc(var(--gap-mobile) * 0.5) !important;
    }

    .schedule-closed {
        color: #f44336;
        font-style: italic;
        margin-bottom: calc(var(--gap-mobile) * 0.5) !important;
    }

    .schedule-ranges {
        margin-left: calc(var(--padding-mobile) * 1);
    }

    .schedule-range {
        margin-bottom: calc(var(--gap-mobile) * 0.25) !important;
        display: flex;
        align-items: center;
        gap: calc(var(--gap-mobile) * 0.5);
    }

    .range-name {
        color: #f4a261;
        font-weight: 500;
        min-width: 80px;
    }

    .range-time {
        color: #ccc;
    }

    /* === REDES SOCIALES === */
    .social-links {
        display: flex;
        gap: calc(var(--gap-mobile) * 0.75);
        margin-top: calc(var(--gap-mobile) * 0.9);
    }

    .social-links a {
        background: rgba(244, 162, 97, 0.2);
        color: #f4a261;
        width: 40px;
        height: 40px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-decoration: none;
        transition: all 0.3s ease;
        font-size: 18px;
        border: 1px solid rgba(244, 162, 97, 0.3);
    }

    .social-links a:hover {
        background: rgba(244, 162, 97, 0.4);
        color: #fff;
        transform: translateY(-2px);
        border-color: rgba(244, 162, 97, 0.6);
    }

    /* === BREAKPOINTS USANDO SISTEMA GLOBAL === */

    /* TABLET Y SUPERIOR (768px+) */
    @media (min-width: 768px) {
        .contact-section {
            padding: calc(var(--padding-tablet) * 3) 0 calc(var(--padding-tablet) * 2) 0;
        }

        .top-bar {
            padding: calc(var(--padding-tablet) * 1) calc(var(--padding-tablet) * 1.2);
        }

        .mini-brand {
            gap: var(--gap-tablet);
        }

        .contact-content {
            padding: calc(var(--padding-tablet) * 2.5);
        }

        .contact-grid {
            gap: calc(var(--gap-tablet) * 1.5);
        }

        .contact-info-section {
            padding: calc(var(--padding-tablet) * 1.25);
        }

        .contact-info-section h4 {
            margin-bottom: calc(var(--gap-tablet) * 1.2);
            padding-bottom: calc(var(--padding-tablet) * 0.5);
            gap: calc(var(--gap-tablet) * 0.5);
        }

        .contact-info-section p {
            margin-bottom: calc(var(--gap-tablet) * 0.67);
        }

        .social-links {
            gap: var(--gap-tablet);
            margin-top: var(--gap-tablet);
        }

        .schedule-group {
            margin-bottom: calc(var(--gap-tablet) * 1);
        }

        .schedule-ranges {
            margin-left: calc(var(--padding-tablet) * 1);
        }
    }

    /* DESKTOP (1024px+) */
    @media (min-width: 1024px) {
        .contact-section {
            padding: calc(var(--padding-desktop) * 2.5) 0 calc(var(--padding-desktop) * 1.67) 0;
        }

        .top-bar {
            padding: calc(var(--padding-desktop) * 0.8) calc(var(--padding-desktop) * 1);
        }

        .mini-brand {
            gap: var(--gap-desktop);
        }

        .contact-content {
            padding: calc(var(--padding-desktop) * 2);
        }

        .contact-grid {
            gap: calc(var(--gap-desktop) * 1.25);
        }

        .contact-info-section {
            padding: calc(var(--padding-desktop) * 1);
        }

        .contact-info-section h4 {
            margin-bottom: calc(var(--gap-desktop) * 0.8);
            padding-bottom: calc(var(--padding-desktop) * 0.33);
            gap: calc(var(--gap-desktop) * 0.5);
        }

        .contact-info-section p {
            margin-bottom: calc(var(--gap-desktop) * 0.5);
        }

        .social-links {
            gap: var(--gap-desktop);
            margin-top: calc(var(--gap-desktop) * 0.67);
        }

        .schedule-group {
            margin-bottom: calc(var(--gap-desktop) * 0.8);
        }

        .schedule-ranges {
            margin-left: calc(var(--padding-desktop) * 1);
        }
    }

    /* DESKTOP LARGE (1400px+) */
    @media (min-width: 1400px) {
        .mini-brand {
            gap: var(--gap-desktop-lg);
        }

        .contact-grid {
            gap: var(--gap-desktop-lg);
        }

        .social-links {
            gap: var(--gap-desktop-lg);
        }
    }

    /* MOBILE PEQUEÑO (0-420px) */
    @media (max-width: 420px) {
        .contact-section {
            padding: calc(var(--padding-mobile) * 5) 0 calc(var(--padding-mobile) * 2) 0;
        }

        .top-bar {
            flex-direction: column;
            gap: calc(var(--gap-mobile) * 0.75);
            text-align: center;
            padding: var(--padding-mobile);
        }

        .contact-content {
            padding: calc(var(--padding-mobile) * 2);
        }

        .contact-grid {
            grid-template-columns: 1fr; /* Una columna en móvil */
            gap: calc(var(--gap-mobile) * 1.5);
        }

        .contact-info-section {
            padding: calc(var(--padding-mobile) * 1);
        }

        .contact-info-section h4 {
            font-size: 1.2rem;
            margin-bottom: calc(var(--gap-mobile) * 0.75);
        }

        .social-links a {
            width: 35px;
            height: 35px;
            font-size: 16px;
        }

        .schedule-ranges {
            margin-left: calc(var(--padding-mobile) * 0.5);
        }
    }
</style>

<script>
    import { useBreakpoints, disableTransitionsDuringResize } from '../../utils/breakpoints.js';
    
    document.addEventListener('DOMContentLoaded', () => {
        const contactSection = document.querySelector('.contact-section');
        const contactSections = document.querySelectorAll('.contact-info-section');
        
        // Usar el sistema centralizado de breakpoints
        const breakpoints = useBreakpoints('contact-component', {
            element: contactSection
        });
        
        // Suscribirse a cambios de breakpoint
        breakpoints.subscribe({
            onBreakpointChange: (newBreakpoint, oldBreakpoint) => {
                console.log(`Contact: Breakpoint changed ${oldBreakpoint} → ${newBreakpoint}`);
                
                // Deshabilitar transiciones durante el cambio
                const elementsToAdjust = [contactSection, ...contactSections];
                disableTransitionsDuringResize(elementsToAdjust);
            }
        });

        // 🔥 SIMPLIFICADO: Formatear mensajes de estado para hacer bold la parte del estado
        function formatStatusMessage() {
            const statusTextElement = document.getElementById('statusText');
            if (!statusTextElement) return;

            const message = statusTextElement.textContent.trim();
            
            // Verificar si el mensaje tiene formato "Estado: Mensaje"
            if (message.includes(':')) {
                const [statusPart, ...messageParts] = message.split(':');
                const messageRest = messageParts.join(':').trim();
                
                // Crear HTML con el estado en bold
                statusTextElement.innerHTML = `<strong>${statusPart.trim()}</strong>: ${messageRest}`;
            }
        }

        // Ejecutar formateo inicial
        formatStatusMessage();

        // Observer para detectar cambios en el texto del status (para actualizaciones dinámicas)
        const statusTextElement = document.getElementById('statusText');
        if (statusTextElement) {
            const observer = new MutationObserver(() => {
                // Pequeño delay para evitar formatear mientras se está actualizando
                setTimeout(formatStatusMessage, 10);
            });
            
            observer.observe(statusTextElement, { 
                childList: true, 
                characterData: true, 
                subtree: true 
            });
        }
    });
</script>