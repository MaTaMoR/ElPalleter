---
export const prerender = true;

import ResponsiveImage from './ResponsiveImage.astro';

interface Props {
    imageId: string;
    alt?: string;
    className?: string;
    overlayColor?: string;
    overlayOpacity?: number;
    fallbackImage?: string;
}

const {
    imageId,
    alt = "Fondo Hero",
    className = '',
    overlayColor = 'rgba(0, 0, 0, 0.25)',
    overlayOpacity = 1
} = Astro.props;
---

<div class={`hero-background ${className}`} id="hero">
    <!-- Imagen de fondo responsiva -->
    <ResponsiveImage
        imageId={imageId}
        alt={alt}
        className="hero-bg-image"
        loading="eager"
        decoding="async"
        sizes="100vw"
        objectFit="cover"
        objectPosition="center"
        priority={true}
        fallbackText="Imagen de fondo no disponible"
        fallbackIcon="picture"
    />
    
    <!-- Overlay con gradiente personalizable -->
    <div 
        class="hero-overlay" 
        style={`
            background: linear-gradient(${overlayColor}, ${overlayColor});
            opacity: ${overlayOpacity};
        `}
    ></div>
    
    <!-- Slot para contenido del hero -->
    <div class="hero-content">
        <slot />
    </div>
</div>

<style>
    /* === HERO BACKGROUND USANDO DESIGN TOKENS === */
    .hero-background {
        position: relative;
        width: 100%;
        height: 100vh;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        color: var(--text-primary);                    /* En lugar de white */
        
        /* Optimizaciones de performance usando tokens */
        transform: translate3d(0, 0, 0);
        backface-visibility: hidden;
        contain: layout style;
    }

    /* === IMAGEN DE FONDO === */
    .hero-background :global(.hero-bg-image) {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
        object-fit: cover;
        object-position: center;
        
        /* Optimización de GPU usando tokens */
        will-change: transform;
        transform: translate3d(0, 0, 0);
    }

    /* === FALLBACK PERSONALIZADO PARA HERO === */
    .hero-background :global(.responsive-image-fallback) {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 0;
        
        /* Usando tokens para el fondo de fallback */
        background: linear-gradient(135deg, 
            var(--dark-600) 0%, 
            var(--dark-400) 100%
        );
        border: none;
        border-radius: 0;
        color: var(--text-secondary);
        min-height: 100vh;
    }

    .hero-background :global(.responsive-image-fallback .fallback-icon) {
        color: var(--text-muted);                      /* En lugar de rgba hardcodeado */
    }

    .hero-background :global(.responsive-image-fallback .fallback-title) {
        color: var(--text-primary);                    /* En lugar de rgba hardcodeado */
    }

    /* === OVERLAY === */
    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        pointer-events: none;
        
        /* Usando variable de overlay del tema */
        background: var(--bg-overlay);
    }

    /* === CONTENIDO === */
    .hero-content {
        position: relative;
        z-index: 2;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
    }

    /* === VARIANTES DEL HERO === */
    
    /* Hero con altura personalizada */
    .hero-background.custom-height {
        height: auto;
        min-height: 60vh;
    }

    /* Hero con parallax (opcional) */
    .hero-background.parallax .hero-bg-image {
        transform: translate3d(0, 0, 0);
        will-change: transform;
    }

    /* === VARIANTES DE OVERLAY === */
    
    /* Overlay más oscuro */
    .hero-background.overlay-dark .hero-overlay {
        background: var(--bg-surface);                 /* Más opaco */
    }
    
    /* Overlay más claro */
    .hero-background.overlay-light .hero-overlay {
        background: rgba(0, 0, 0, 0.1);
    }
    
    /* Sin overlay */
    .hero-background.no-overlay .hero-overlay {
        display: none;
    }

    /* === RESPONSIVE === */
    
    /* Mobile optimizations */
    @media (max-width: 768px) {
        .hero-background {
            /* En móvil, usar viewport units más estables */
            height: 100svh;
        }
        
        .hero-background :global(.responsive-image-fallback .fallback-content) {
            padding: var(--space-8) var(--space-4);    /* En lugar de 2rem 1rem */
        }
    }

    /* Tablet adjustments */
    @media (min-width: 768px) and (max-width: 1023px) {
        .hero-background :global(.responsive-image-fallback .fallback-content) {
            padding: var(--space-12) var(--space-6);
        }
    }

    /* Desktop optimizations */
    @media (min-width: 1024px) {
        .hero-background :global(.responsive-image-fallback .fallback-content) {
            padding: var(--space-16) var(--space-8);
        }
    }

    /* === TEMAS ESPECÍFICOS === */
    
    /* Ajustes para tema claro */
    [data-theme="light"] .hero-background :global(.responsive-image-fallback) {
        background: linear-gradient(135deg, 
            var(--gray-100) 0%, 
            var(--gray-300) 100%
        );
        color: var(--text-primary);
    }
    
    [data-theme="light"] .hero-overlay {
        background: rgba(255, 255, 255, 0.1);
    }

    /* === EFECTOS ESPECIALES === */
    
    /* Efecto de cristal en el overlay */
    .hero-background.glass-overlay .hero-overlay {
        background: var(--glass-bg);
        backdrop-filter: var(--backdrop-blur);
    }
    
    /* Gradiente personalizado con colores del tema */
    .hero-background.gradient-overlay .hero-overlay {
        background: linear-gradient(
            180deg,
            transparent 0%,
            var(--bg-overlay) 50%,
            var(--bg-surface) 100%
        );
    }

    /* === ANIMACIONES === */
    
    /* Fade in del hero */
    .hero-background.animate-in {
        animation: heroFadeIn var(--duration-1000) var(--ease-out);
    }
    
    @keyframes heroFadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    
    /* Parallax suave */
    .hero-background.parallax .hero-bg-image {
        animation: subtleParallax 20s ease-in-out infinite;
    }
    
    @keyframes subtleParallax {
        0%, 100% {
            transform: translate3d(0, 0, 0) scale(1);
        }
        50% {
            transform: translate3d(0, -10px, 0) scale(1.02);
        }
    }

    /* === ACCESIBILIDAD === */
    
    /* Respeto por preferencias de movimiento reducido */
    @media (prefers-reduced-motion: reduce) {
        .hero-background.parallax .hero-bg-image {
            transform: none;
            will-change: auto;
            animation: none;
        }
        
        .hero-background.animate-in {
            animation: none;
        }
    }
    
    /* Alto contraste */
    @media (prefers-contrast: high) {
        .hero-overlay {
            background: rgba(0, 0, 0, 0.7) !important;
        }
        
        [data-theme="light"] .hero-overlay {
            background: rgba(255, 255, 255, 0.8) !important;
        }
    }

    /* === OPTIMIZACIONES DE PERFORMANCE === */
    
    /* Hint al navegador sobre lo que va a cambiar */
    .hero-background.will-animate {
        will-change: opacity, transform;
    }
    
    /* Contener el layout para mejor performance */
    .hero-background {
        contain: layout style paint;
    }
    
    /* Isolation para efectos de blend */
    .hero-background.isolated {
        isolation: isolate;
    }
</style>