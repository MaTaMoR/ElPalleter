---
export const prerender = true;

import { i18nCore } from '../../i18n/core.js';
import ThemeToggle from '../theme/ThemeToggle.astro';

export interface Props {
  variant?: 'desktop' | 'mobile';
  className?: string;
  includeThemeToggle?: boolean;
}

const { 
  variant = 'desktop', 
  className = '',
  includeThemeToggle = true 
} = Astro.props;

// Obtener datos de idiomas desde el sistema centralizado
const languages = await i18nCore.getLanguagePickerDataWithAstro(Astro);

// Encontrar idioma actual y otros idiomas
const currentLanguage = languages.find(lang => lang.isActive) || languages[0];
const otherLanguages = languages.filter(lang => !lang.isActive);
---

<div class={`language-picker ${variant} ${className}`} data-language-picker>
  <!-- Botón principal que muestra el idioma actual -->
  <button class="lang-current" aria-label={`Idioma actual: ${currentLanguage.name}`} aria-haspopup="true" aria-expanded="false">
    <span class="lang-flag">
      {currentLanguage.flag.isEmoji ? (
        <span class="flag-emoji" aria-hidden="true">{currentLanguage.flag.value}</span>
      ) : (
        <img src={currentLanguage.flag.value} alt="" class="flag-svg" aria-hidden="true" />
      )}
    </span>
    <span class="lang-arrow" aria-hidden="true">▼</span>
  </button>
  
  <!-- Dropdown con otros idiomas -->
  <div class="lang-options" role="menu" aria-label="Seleccionar idioma">
    {otherLanguages.map((lang) => (
      <a 
        href={lang.url}
        class="lang-option"
        role="menuitem"
        aria-label={`Cambiar a ${lang.name}`}
        title={`Cambiar a ${lang.name}`}
        hreflang={lang.code}
      >
        <span class="lang-flag">
          {lang.flag.isEmoji ? (
            <span class="flag-emoji" aria-hidden="true">{lang.flag.value}</span>
          ) : (
            <img src={lang.flag.value} alt="" class="flag-svg" aria-hidden="true" />
          )}
        </span>
        <span class="lang-full-name">{lang.nativeName}</span>
      </a>
    ))}
    
    <!-- ✨ NUEVO: Integrar ThemeToggle al final del dropdown -->
    {includeThemeToggle && (
      <div class="language-picker-theme">
        <ThemeToggle size="small" />
      </div>
    )}
  </div>
</div>

<style>
  /* === BASE COMPONENT === */
  .language-picker {
    position: relative;
    display: inline-block;
    font-family: var(--font-primary);                   /* inherit → token */
    z-index: var(--z-50);                               /* 50 → token */
  }

  /* === BOTÓN PRINCIPAL === */
  .lang-current {
    background: transparent;
    border: var(--border-1) solid transparent;          /* 1px → token */
    color: var(--text-muted);                           /* rgba(255, 255, 255, 0.9) → token */
    padding: var(--space-3) var(--space-4);             /* 0.7rem 1rem → tokens */
    border-radius: var(--radius-lg);                    /* 8px → token */
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: var(--space-2);                                /* 0.6rem → token */
    transition: var(--transition-base);                 /* all 0.3s ease → token */
    font-size: var(--text-sm);                          /* 0.9rem → token */
    font-weight: var(--font-medium);                    /* 500 → token */
    min-width: 70px;
    justify-content: center;
  }

  .lang-current:hover {
    color: var(--text-primary);                         /* white → token */
    transform: translateY(calc(-1 * var(--space-1)));   /* -1px → token */
  }

  .lang-current:focus {
    outline: none;
    color: var(--text-primary);                         /* white → token */
  }

  .lang-current:focus-visible {
    outline: var(--border-2) solid var(--focus-ring);   /* Accesibilidad mejorada */
    outline-offset: var(--space-1);
  }

  /* Estado activo solo cuando está abierto el dropdown */
  .language-picker[data-open="true"] .lang-current {
    color: var(--text-primary);                         /* white → token */
  }

  /* === ELEMENTOS DE BANDERA === */
  .lang-flag {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
  }

  .flag-emoji {
    font-size: var(--text-xl);                          /* 1.6rem → token */
    line-height: 1;
  }

  .flag-svg {
    width: 32px;
    height: 21px;
    border-radius: var(--radius-sm);                    /* 3px → token */
    object-fit: cover;
    box-shadow: var(--shadow-sm);                       /* 0 2px 4px rgba(0, 0, 0, 0.2) → token */
  }

  .lang-arrow {
    font-size: var(--text-xs);                          /* 0.7rem → token */
    transition: transform var(--duration-300) var(--ease-out); /* 0.3s ease → tokens */
    margin-left: var(--space-1);                        /* 0.1rem → token */
  }

  .language-picker[data-open="true"] .lang-arrow {
    transform: rotate(180deg);
  }

  /* === DROPDOWN === */
  .lang-options {
    position: absolute;
    top: calc(100% + var(--space-2));                   /* 0.5rem → token */
    right: 0;
    background: var(--glass-bg);                        /* rgba(15, 15, 15, 0.95) → token */
    backdrop-filter: var(--backdrop-blur-strong);       /* blur(20px) → token */
    -webkit-backdrop-filter: var(--backdrop-blur-strong);
    border: var(--border-1) solid var(--border-secondary); /* rgba(255, 255, 255, 0.1) → token */
    border-radius: var(--radius-xl);                    /* 12px → token */
    min-width: 180px;                                   /* ✨ Más ancho para acomodar el theme toggle */
    width: max-content;
    box-shadow: var(--shadow-xl),                       /* 0 10px 30px rgba(0, 0, 0, 0.4) → token */
                0 0 0 var(--border-1) var(--border-secondary); /* rgba(255, 255, 255, 0.05) → token */
    z-index: var(--z-modal);                            /* 1000 → token */
    opacity: 0;
    visibility: hidden;
    transform: translateY(calc(-1 * var(--space-3)));   /* -10px → token */
    transition: all var(--duration-300) var(--ease-in-out); /* 0.3s cubic-bezier → tokens */
    overflow: hidden;
  }

  .language-picker[data-open="true"] .lang-options {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  /* === OPCIONES DEL DROPDOWN === */
  .lang-option {
    display: flex;
    align-items: center;
    gap: var(--space-3);                                /* 0.7rem → token */
    padding: var(--space-3) var(--space-4);             /* 0.8rem 1rem → tokens */
    color: var(--text-primary);                         /* white → token */
    text-decoration: none;
    transition: all var(--duration-200) var(--ease-out); /* 0.2s ease → tokens */
    border-bottom: var(--border-1) solid var(--border-secondary); /* rgba(255, 255, 255, 0.05) → token */
    cursor: pointer;
    position: relative;
    white-space: nowrap;
  }

  .lang-option:last-child {
    border-bottom: none;
  }

  .lang-option:hover {
    background: var(--hover-overlay);                   /* rgba(255, 255, 255, 0.08) → token */
    color: var(--text-primary);                         /* white → token */
    transform: translateX(var(--space-1));              /* 2px → token */
  }

  /* Usar focus-visible para mostrar focus solo con teclado */
  .lang-option:focus-visible {
    background: var(--active-overlay);                  /* rgba(255, 255, 255, 0.1) → token */
    color: var(--text-primary);                         /* white → token */
    outline: var(--border-1) solid var(--border-primary); /* rgba(255, 255, 255, 0.2) → token */
    outline-offset: calc(-1 * var(--border-1));         /* -1px → token */
  }

  /* Asegurar que hover tenga prioridad sobre focus */
  .lang-option:focus:not(:hover) {
    background: var(--bg-surface);                      /* rgba(255, 255, 255, 0.05) → token */
    color: var(--text-primary);                         /* white → token */
  }

  /* Para mejor accesibilidad en móvil, aumentar área táctil */
  @media (max-width: 768px) {
    .lang-option {
      padding: var(--space-4);                          /* 1rem → token */
      min-height: 44px; /* Área táctil mínima recomendada */
    }
    
    /* En móvil, no mostrar efectos de focus ya que no hay teclado */
    .lang-option:focus {
      background: transparent;
      color: inherit;
    }
    
    /* Solo mostrar hover/touch en móvil */
    .lang-option:hover,
    .lang-option:active {
      background: var(--hover-overlay);                 /* rgba(255, 255, 255, 0.08) → token */
      color: var(--text-primary);                       /* white → token */
      transform: none; /* Sin animación de deslizamiento en móvil */
    }
  }

  /* Bandera en opciones del dropdown */
  .lang-option .lang-flag {
    flex-shrink: 0;
    width: 26px;
    height: 26px;
  }

  .lang-option .flag-emoji {
    font-size: var(--text-lg);                          /* 1.3rem → token */
  }

  .lang-option .flag-svg {
    width: 26px;
    height: 17px;
    border-radius: var(--radius-sm);                    /* 2px → token */
  }

  .lang-option .lang-full-name {
    font-size: var(--text-sm);                          /* 0.9rem → token */
    font-weight: var(--font-medium);                    /* 500 → token */
    letter-spacing: var(--tracking-normal);             /* 0.2px → token */
  }

  /* === VARIANTES === */

  /* Variante Desktop */
  .language-picker.desktop {
    /* Estilos base ya aplicados */
  }

  /* Variante Mobile */
  .language-picker.mobile .lang-current {
    padding: var(--space-3) calc(var(--space-4) + var(--space-1)); /* 0.8rem 1.1rem → tokens */
    font-size: var(--text-xs);                          /* 0.85rem → token */
    min-width: 75px;
  }

  .language-picker.mobile .lang-options {
    min-width: 130px;
    width: max-content;
    left: auto;
    right: 0;
  }

  .language-picker.mobile .lang-option {
    padding: calc(var(--space-3) + var(--space-1)) var(--space-4); /* 0.9rem 1rem → tokens */
  }

  /* === RESPONSIVE === */
  @media (max-width: 768px) {
    .language-picker.desktop {
      display: none;
    }
  }

  @media (min-width: 769px) {
    .language-picker.mobile {
      display: none;
    }
  }

  /* === ANIMACIONES ADICIONALES === */
  .lang-option::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--space-1);                              /* 2px → token */
    background: #ff4444;                                /* Mantener color específico */
    transform: scaleY(0);
    transition: transform var(--duration-200) var(--ease-out); /* 0.2s ease → tokens */
  }

  .lang-option:hover::before {
    transform: scaleY(1);
  }

  /* === VARIANTES DE TEMA === */

  /* Tema claro */
  [data-theme="light"] .lang-current {
    color: var(--text-secondary);                       /* Se adapta al tema */
  }

  [data-theme="light"] .lang-current:hover,
  [data-theme="light"] .language-picker[data-open="true"] .lang-current {
    color: var(--text-primary);
  }

  [data-theme="light"] .lang-options {
    background: var(--bg-surface);                      /* Fondo adaptado */
    border-color: var(--border-primary);
    box-shadow: var(--shadow-lg),
                0 0 0 var(--border-1) var(--border-primary);
  }

  [data-theme="light"] .lang-option {
    color: var(--text-primary);
    border-bottom-color: var(--border-primary);
  }

  [data-theme="light"] .lang-option:hover {
    background: var(--hover-overlay);
  }

  /* === ACCESIBILIDAD === */
  @media (prefers-reduced-motion: reduce) {
    .lang-current,
    .lang-options,
    .lang-option,
    .lang-arrow,
    .lang-option::before {
      transition: none;
      animation: none;
    }
    
    .language-picker[data-open="true"] .lang-arrow {
      transform: none;
    }
    
    .lang-option:hover {
      transform: none;
    }
  }

  /* Alto contraste */
  @media (prefers-contrast: high) {
    .lang-current {
      border-color: var(--border-primary);
    }
    
    .lang-current:hover,
    .language-picker[data-open="true"] .lang-current {
      border-color: var(--accent-primary);
      background: var(--accent-light);
    }
    
    .lang-options {
      background: var(--bg-primary);
      border-color: var(--accent-primary);
      border-width: var(--border-2);
    }
    
    .lang-option:hover {
      background: var(--accent-light);
      border-color: var(--accent-primary);
    }
  }

  /* === ESTADOS DE CARGA === */
  .language-picker[data-loading="true"] .lang-current {
    opacity: 0.7;
    cursor: wait;
  }

  /* === ESTILOS ESPECÍFICOS PARA SIDEBAR === */
  .language-picker.sidebar-language {
    width: 100%;
  }

  .language-picker.sidebar-language .lang-current {
    width: 100%;
    justify-content: flex-start;
    background: var(--accent-light);                    /* rgba(244, 162, 97, 0.1) → token */
    border-color: var(--accent-medium);                 /* rgba(244, 162, 97, 0.5) → token */
    padding: var(--space-3) calc(var(--space-4) + var(--space-1)); /* 0.8rem 1.2rem → tokens */
    font-size: var(--text-base);                        /* 1rem → token */
  }

  .language-picker.sidebar-language .lang-options {
    position: static;
    background: var(--accent-light);                    /* rgba(244, 162, 97, 0.05) → token */
    border: var(--border-1) solid var(--accent-medium); /* rgba(244, 162, 97, 0.2) → token */
    margin-top: var(--space-2);                         /* 0.5rem → token */
    opacity: 1;
    visibility: visible;
    transform: none;
    display: none;
  }

  .language-picker.sidebar-language[data-open="true"] .lang-options {
    display: block;
  }

  .language-picker-theme {
    display: flex;
    justify-content: center;
    padding: var(--space-3); /* 0.5rem → token */
  }

  /* === MEJORAS DE RENDIMIENTO === */
  .language-picker {
    contain: layout style;
  }
  
  .lang-options {
    contain: layout style paint;
    will-change: opacity, transform, visibility;
  }
  
  .lang-option {
    will-change: background-color, transform;
  }

  /* === ESTADOS ADICIONALES === */
  
  /* Estado hover del contenedor */
  .language-picker:hover .lang-current {
    border-color: var(--border-primary);
  }
  
  /* Estado activo del dropdown */
  .language-picker[data-open="true"] .lang-current {
    border-color: var(--accent-primary);
    background: var(--accent-light);
  }
</style>

<script>
  class LanguagePicker {
    constructor(element) {
      this.element = element;
      this.button = element.querySelector('.lang-current');
      this.dropdown = element.querySelector('.lang-options');
      this.options = element.querySelectorAll('.lang-option');
      this.isOpen = false;
      
      this.init();
    }
    
    // Detectar si es dispositivo móvil
    isMobile() {
      return window.innerWidth <= 768 || 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    }
    
    init() {
      if (!this.button || !this.dropdown) return;
      
      // Event listeners
      this.button.addEventListener('click', (e) => this.toggleDropdown(e));
      this.button.addEventListener('keydown', (e) => this.handleKeydown(e));
      
      // Cerrar al hacer clic fuera
      document.addEventListener('click', (e) => this.handleOutsideClick(e));
      
      // Navegación con teclado en opciones
      this.options.forEach((option, index) => {
        option.addEventListener('keydown', (e) => this.handleOptionKeydown(e, index));
        
        // Limpiar focus al hacer hover para evitar doble selección
        option.addEventListener('mouseenter', () => {
          if (!this.isMobile()) {
            // En desktop, remover focus de todas las opciones al hacer hover
            this.options.forEach(opt => opt.blur());
          }
        });
      });
      
      // Escape para cerrar
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.closeDropdown();
          this.button.focus();
        }
      });
    }
    
    toggleDropdown(event) {
      event.preventDefault();
      event.stopPropagation();
      
      if (this.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }
    
    openDropdown() {
      this.isOpen = true;
      this.element.setAttribute('data-open', 'true');
      this.button.setAttribute('aria-expanded', 'true');
      
      // Solo hacer autofocus en desktop, no en móvil
      if (!this.isMobile()) {
        setTimeout(() => {
          const firstOption = this.dropdown.querySelector('.lang-option');
          if (firstOption) firstOption.focus();
        }, 100);
      }
    }
    
    closeDropdown() {
      this.isOpen = false;
      this.element.setAttribute('data-open', 'false');
      this.button.setAttribute('aria-expanded', 'false');
      
      // Limpiar cualquier focus activo en las opciones
      this.options.forEach(option => option.blur());
    }
    
    handleKeydown(event) {
      switch (event.key) {
        case 'Enter':
        case ' ':
        case 'ArrowDown':
          event.preventDefault();
          this.openDropdown();
          break;
        case 'ArrowUp':
          event.preventDefault();
          this.openDropdown();
          // Focus en última opción
          if (!this.isMobile()) {
            setTimeout(() => {
              const lastOption = [...this.options].pop();
              if (lastOption) lastOption.focus();
            }, 100);
          }
          break;
      }
    }
    
    handleOptionKeydown(event, currentIndex) {
      // Solo manejar navegación con teclado en desktop
      if (this.isMobile()) return;
      
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          const nextIndex = (currentIndex + 1) % this.options.length;
          this.options[nextIndex].focus();
          break;
        case 'ArrowUp':
          event.preventDefault();
          const prevIndex = currentIndex === 0 ? this.options.length - 1 : currentIndex - 1;
          this.options[prevIndex].focus();
          break;
        case 'Enter':
        case ' ':
          event.preventDefault();
          this.options[currentIndex].click();
          break;
      }
    }
    
    handleOutsideClick(event) {
      if (!this.element.contains(event.target) && this.isOpen) {
        this.closeDropdown();
      }
    }
  }
  
  // Inicializar todos los language pickers
  document.addEventListener('DOMContentLoaded', () => {
    const pickers = document.querySelectorAll('[data-language-picker]');
    pickers.forEach(picker => new LanguagePicker(picker));
  });
</script>