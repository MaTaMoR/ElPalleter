---
export const prerender = true;

import { i18nCore } from '../../i18n/core.js';
import ThemeToggle from '../theme/ThemeToggle.astro';
import Text from '../i18n/Text.astro'; // Importar el componente Text

export interface Props {
  variant?: 'desktop' | 'mobile';
  className?: string;
  includeThemeToggle?: boolean;
}

const { 
  variant = 'desktop', 
  className = '',
  includeThemeToggle = true 
} = Astro.props;

// Obtener datos de idiomas desde el sistema centralizado
const languages = await i18nCore.getLanguagePickerDataWithAstro(Astro);

// Encontrar idioma actual y otros idiomas
const currentLanguage = languages.find(lang => lang.isActive) || languages[0];
const otherLanguages = languages.filter(lang => !lang.isActive);
---

<div class={`language-picker ${variant} ${className}`} data-language-picker>
  <!-- Botón principal que muestra el idioma actual -->
  <button class="lang-current" aria-label={`Idioma actual: ${currentLanguage.name}`} aria-haspopup="true" aria-expanded="false">
    <span class="lang-flag">
      {currentLanguage.flag.isEmoji ? (
        <span class="flag-emoji" aria-hidden="true">{currentLanguage.flag.value}</span>
      ) : (
        <img src={currentLanguage.flag.value} alt="" class="flag-svg" aria-hidden="true" />
      )}
    </span>
    <span class="lang-arrow" aria-hidden="true">▼</span>
  </button>
  
  <!-- Dropdown con otros idiomas -->
  <div class="lang-options" role="menu" aria-label="Seleccionar idioma">
    {otherLanguages.map((lang) => (
      <a 
        href={lang.url}
        class="lang-option"
        role="menuitem"
        aria-label={`Cambiar a ${lang.name}`}
        title={`Cambiar a ${lang.name}`}
        hreflang={lang.code}
      >
        <span class="lang-flag">
          {lang.flag.isEmoji ? (
            <span class="flag-emoji" aria-hidden="true">{lang.flag.value}</span>
          ) : (
            <img src={lang.flag.value} alt="" class="flag-svg" aria-hidden="true" />
          )}
        </span>
        <span class="lang-full-name">{lang.nativeName}</span>
      </a>
    ))}
    
    <!-- Integrar ThemeToggle con nueva estructura simplificada -->
    {includeThemeToggle && (
      <div class="language-picker-theme theme-section">
        <div class="theme-separator">
          <span class="separator-line"></span>
          <div class="theme-status-badge">
            <Text 
              key="theme.dark" 
              class="theme-text theme-text-dark" 
            />
            <Text 
              key="theme.light" 
              class="theme-text theme-text-light" 
            />
          </div>
          <span class="separator-line"></span>
        </div>
        <div class="theme-control">
          <ThemeToggle size="small" />
        </div>
      </div>
    )}
  </div>
</div>

<style>
  /* === BASE COMPONENT - USANDO DESIGN SYSTEM === */
  .language-picker {
    position: relative;
    display: inline-block;
    font-family: var(--font-primary);
    z-index: var(--z-50);
    contain: layout style;

    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  /* === BOTÓN PRINCIPAL - COMPLETAMENTE MIGRADO === */
  .lang-current {
    background: transparent;
    border: var(--border-1) solid transparent;
    color: var(--text-muted);
    padding: var(--space-3) var(--space-4);
    border-radius: var(--radius-lg);
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: var(--space-2);
    transition: var(--transition-base);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    min-width: 70px;
    justify-content: center;
  }

  .lang-current:hover {
    color: var(--text-primary);
    transform: translateY(calc(-1 * var(--space-1)));
    border-color: var(--border-primary);
  }

  .lang-current:focus {
    outline: none;
    color: var(--text-primary);
  }

  .lang-current:focus-visible {
    outline: var(--border-2) solid var(--focus-ring);
    outline-offset: var(--space-1);
  }

  /* Estado activo solo cuando está abierto el dropdown */
  .language-picker[data-open="true"] .lang-current {
    color: var(--text-primary);
    border-color: var(--accent-primary);
    background: var(--accent-light);
  }

  /* === ELEMENTOS DE BANDERA === */
  .lang-flag {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
  }

  .flag-emoji {
    font-size: var(--text-xl);
    line-height: 1;
  }

  .flag-svg {
    width: 32px;
    height: 21px;
    border-radius: var(--radius-sm);
    object-fit: cover;
    box-shadow: var(--shadow-sm);
  }

  .lang-arrow {
    font-size: var(--text-xs);
    transition: transform var(--duration-300) var(--ease-out);
    margin-left: var(--space-1);
  }

  .language-picker[data-open="true"] .lang-arrow {
    transform: rotate(180deg);
  }

  /* === DROPDOWN - USANDO SISTEMA === */
  .lang-options {
    position: absolute;
    top: calc(100% + var(--space-2));
    right: 0;
    background: var(--glass-bg);
    backdrop-filter: var(--backdrop-blur-strong);
    -webkit-backdrop-filter: var(--backdrop-blur-strong);
    border: var(--border-1) solid var(--glass-border);
    border-radius: var(--radius-xl);
    min-width: 180px;
    width: max-content;
    box-shadow: var(--shadow-xl);
    z-index: var(--z-modal);
    opacity: 0;
    visibility: hidden;
    transform: translateY(calc(-1 * var(--space-3)));
    transition: all var(--duration-300) var(--ease-in-out);
    overflow: hidden;
    contain: layout style paint;
    will-change: opacity, transform, visibility;
  }

  .language-picker[data-open="true"] .lang-options {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  /* === OPCIONES DEL DROPDOWN - MIGRADAS === */
  .lang-option {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-3) var(--space-4);
    color: var(--text-primary);
    text-decoration: none;
    transition: var(--transition-base);
    border-bottom: var(--border-1) solid var(--border-secondary);
    cursor: pointer;
    position: relative;
    white-space: nowrap;
    will-change: background-color, transform;
  }

  .lang-option:last-child {
    border-bottom: none;
  }

  .lang-option:hover {
    background: var(--hover-overlay);
    color: var(--text-primary);
    transform: translateX(var(--space-1));
  }

  .lang-option:focus-visible {
    background: var(--active-overlay);
    color: var(--text-primary);
    outline: var(--border-1) solid var(--border-primary);
    outline-offset: calc(-1 * var(--border-1));
  }

  .lang-option:focus:not(:hover) {
    background: var(--bg-surface);
    color: var(--text-primary);
  }

  /* === RESPONSIVE - MEJORAS TÁCTILES === */
  @media (max-width: 768px) {
    .lang-option {
      padding: var(--space-4);
      min-height: 44px; /* Área táctil mínima recomendada */
    }
    
    .lang-option:focus {
      background: transparent;
      color: inherit;
    }
    
    .lang-option:hover,
    .lang-option:active {
      background: var(--hover-overlay);
      color: var(--text-primary);
      transform: none; /* Sin animación de deslizamiento en móvil */
    }
  }

  /* === BANDERA EN OPCIONES === */
  .lang-option .lang-flag {
    flex-shrink: 0;
    width: 26px;
    height: 26px;
  }

  .lang-option .flag-emoji {
    font-size: var(--text-lg);
  }

  .lang-option .flag-svg {
    width: 26px;
    height: 17px;
    border-radius: var(--radius-sm);
  }

  .lang-option .lang-full-name {
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    letter-spacing: var(--tracking-normal);
  }

  /* === VARIANTES === */

  /* Variante Desktop */
  .language-picker.desktop {
    /* Estilos base ya aplicados */
  }

  /* Variante Mobile */
  .language-picker.mobile .lang-current {
    padding: var(--space-3) calc(var(--space-4) + var(--space-1));
    font-size: var(--text-xs);
    min-width: 75px;
  }

  .language-picker.mobile .lang-options {
    min-width: 130px;
    width: max-content;
    left: auto;
    right: 0;
  }

  .language-picker.mobile .lang-option {
    padding: calc(var(--space-3) + var(--space-1)) var(--space-4);
  }

  /* === RESPONSIVE BREAKPOINTS === */
  @media (max-width: 768px) {
    .language-picker.desktop {
      display: none;
    }
  }

  @media (min-width: 769px) {
    .language-picker.mobile {
      display: none;
    }
  }

  /* === ANIMACIONES ADICIONALES === */
  .lang-option::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--space-1);
    background: var(--accent-primary);
    transform: scaleY(0);
    transition: transform var(--duration-200) var(--ease-out);
  }

  .lang-option:hover::before {
    transform: scaleY(1);
  }

  /* === THEME SECTION: Compacta limpia usando design system === */
  .language-picker-theme.theme-section {
    padding: var(--space-3) var(--space-4);
    margin-top: var(--space-1);
  }

  .theme-section .theme-separator {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    margin-bottom: var(--space-3);
  }

  .theme-section .separator-line {
    flex: 1;
    height: 1px;
    background: var(--border-secondary);
  }

  .theme-status-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-1) var(--space-3);
    background: var(--bg-surface);
    border-radius: var(--radius-lg);
    border: var(--border-1) solid var(--border-primary);
    transition: var(--transition-base);
  }

  .theme-section .theme-control {
    display: flex;
    justify-content: center;
  }

  /* === THEME TEXT: Mostrar/ocultar según tema === */
  .theme-text {
    font-size: var(--text-xs);
    font-weight: var(--font-medium);
    color: var(--text-primary);
    text-transform: capitalize;
  }

  /* Por defecto, mostrar tema oscuro */
  .theme-text-dark {
    display: inline;
  }

  .theme-text-light {
    display: none;
  }

  /* Cuando el tema es claro, mostrar el texto de tema claro */
  html[data-theme="light"] .theme-text-dark {
    display: none;
  }

  html[data-theme="light"] .theme-text-light {
    display: inline;
  }

  /* Alternativamente, usando clases en el body o html */
  .theme-light .theme-text-dark {
    display: none;
  }

  .theme-light .theme-text-light {
    display: inline;
  }

  .theme-dark .theme-text-dark {
    display: inline;
  }

  .theme-dark .theme-text-light {
    display: none;
  }

  /* === RESPONSIVE PARA THEME SECTION === */
  @media (max-width: 768px) {
    .language-picker-theme.theme-section {
      padding: var(--space-3);
    }
    
    .theme-status-badge {
      padding: var(--space-2) var(--space-3);
    }
  }

  /* === ACCESIBILIDAD === */
  @media (prefers-reduced-motion: reduce) {
    .lang-current,
    .lang-options,
    .lang-option,
    .lang-arrow,
    .lang-option::before,
    .theme-status-badge {
      transition: none;
      animation: none;
    }
    
    .language-picker[data-open="true"] .lang-arrow {
      transform: none;
    }
    
    .lang-option:hover {
      transform: none;
    }
  }

  @media (prefers-contrast: high) {
    .lang-current {
      border-color: var(--border-primary);
    }
    
    .lang-current:hover,
    .language-picker[data-open="true"] .lang-current {
      border-color: var(--accent-primary);
      background: var(--accent-light);
    }
    
    .lang-options {
      background: var(--bg-primary);
      border-color: var(--accent-primary);
      border-width: var(--border-2);
    }
    
    .lang-option:hover {
      background: var(--accent-light);
      border-color: var(--accent-primary);
    }

    .theme-status-badge {
      border-width: var(--border-2);
      border-color: var(--border-accent);
    }
  }

  /* === ESTADOS DE CARGA === */
  .language-picker[data-loading="true"] .lang-current {
    opacity: 0.7;
    cursor: wait;
  }

  /* === ESTILOS ESPECÍFICOS PARA SIDEBAR === */
  .language-picker.sidebar-language {
    width: 100%;
  }

  .language-picker.sidebar-language .lang-current {
    width: 100%;
    justify-content: flex-start;
    background: var(--accent-light);
    border-color: var(--accent-medium);
    padding: var(--space-3) calc(var(--space-4) + var(--space-1));
    font-size: var(--text-base);
  }

  .language-picker.sidebar-language .lang-options {
    position: static;
    background: var(--accent-light);
    border: var(--border-1) solid var(--accent-medium);
    margin-top: var(--space-2);
    opacity: 1;
    visibility: visible;
    transform: none;
    display: none;
  }

  .language-picker.sidebar-language[data-open="true"] .lang-options {
    display: block;
  }

  /* === ESTADOS ADICIONALES === */
  .language-picker:hover .lang-current {
    border-color: var(--border-primary);
  }
</style>

<script>
  import { breakpointManager } from "../../utils/breakpoints";

  class LanguagePicker {
    constructor(element) {
      this.element = element;
      this.button = element.querySelector('.lang-current');
      this.dropdown = element.querySelector('.lang-options');
      this.options = element.querySelectorAll('.lang-option');
      this.isOpen = false;
      
      this.init();
    }
    
    // Detectar si es dispositivo móvil
    isMobile() {
      return breakpointManager.isMobile();
    }
    
    init() {
      if (!this.button || !this.dropdown) return;
      
      // Event listeners básicos
      this.button.addEventListener('click', (e) => this.toggleDropdown(e));

      // Cerrar al hacer clic fuera
      document.addEventListener('click', (e) => this.handleOutsideClick(e));
      
      // Navegación con teclado en opciones
      this.options.forEach((option, index) => {
        // Limpiar focus al hacer hover para evitar doble selección
        option.addEventListener('mouseenter', () => {
          if (!this.isMobile()) {
            // En desktop, remover focus de todas las opciones al hacer hover
            this.options.forEach(opt => opt.blur());
          }
        });
      });
      
      // Escape para cerrar
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.closeDropdown();
          this.button.focus();
        }
      });
    }
    
    toggleDropdown(event) {
      event.preventDefault();
      event.stopPropagation();
      
      if (this.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }
    
    openDropdown() {
      this.isOpen = true;
      this.element.setAttribute('data-open', 'true');
      this.button.setAttribute('aria-expanded', 'true');
      
      // Solo hacer autofocus en desktop, no en móvil
      if (!this.isMobile()) {
        setTimeout(() => {
          const firstOption = this.dropdown.querySelector('.lang-option');
          if (firstOption) firstOption.focus();
        }, 100);
      }
    }
    
    closeDropdown() {
      this.isOpen = false;
      this.element.setAttribute('data-open', 'false');
      this.button.setAttribute('aria-expanded', 'false');
      
      // Limpiar cualquier focus activo en las opciones
      this.options.forEach(option => option.blur());
    }
    
    handleOutsideClick(event) {
      if (!this.element.contains(event.target) && this.isOpen) {
        this.closeDropdown();
      }
    }
  }
  
  // Inicializar todos los language pickers
  document.addEventListener('DOMContentLoaded', () => {
    const pickers = document.querySelectorAll('[data-language-picker]');
    pickers.forEach(picker => new LanguagePicker(picker));
  });
</script>