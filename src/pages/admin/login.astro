---
export const prerender = false;

import { AuthService } from '../../services/AuthService.js';

const user = await AuthService.getUserFromRequest(Astro.request);
if (user) {
  return Astro.redirect('/admin/dashboard');
}
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - El Palleter</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .login-container {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h1 {
            color: #333;
            font-size: 28px;
            margin-bottom: 8px;
        }

        .logo p {
            color: #666;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            color: #333;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-group input:disabled {
            background-color: #f8f9fa;
            color: #6c757d;
            cursor: not-allowed;
        }

        .login-btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            position: relative;
        }

        .login-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .login-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .error-message {
            background: #fee;
            color: #c33;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #fcc;
            display: none;
        }

        .warning-message {
            background: #fef3cd;
            color: #856404;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #ffeaa7;
            display: none;
        }

        .rate-limit-message {
            background: #fff3cd;
            color: #856404;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #ffeaa7;
            display: none;
            text-align: center;
        }

        .rate-limit-timer {
            font-weight: 600;
            font-size: 18px;
            color: #dc3545;
            margin-top: 8px;
        }

        .loading {
            display: none;
            text-align: center;
            margin-top: 20px;
            color: #666;
        }

        .back-link {
            text-align: center;
            margin-top: 20px;
        }

        .back-link a {
            color: #667eea;
            text-decoration: none;
            font-size: 14px;
        }

        .back-link a:hover {
            text-decoration: underline;
        }

        .retry-info {
            background: #e3f2fd;
            color: #1565c0;
            padding: 10px;
            border-radius: 6px;
            margin-top: 15px;
            display: none;
            font-size: 14px;
            text-align: center;
        }

        .progress-bar {
            width: 100%;
            height: 4px;
            background: #e9ecef;
            border-radius: 2px;
            margin-top: 10px;
            overflow: hidden;
            display: none;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 2px;
            transition: width 0.1s ease;
            width: 0%;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo">
            <h1>El Palleter</h1>
            <p>Panel de Administración</p>
        </div>

        <div class="error-message" id="errorMessage"></div>
        <div class="warning-message" id="warningMessage"></div>
        <div class="rate-limit-message" id="rateLimitMessage">
            <div id="rateLimitText"></div>
            <div class="rate-limit-timer" id="rateLimitTimer"></div>
            <div class="progress-bar" id="progressBar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
        </div>

        <form id="loginForm">
            <div class="form-group">
                <label for="username">Usuario o Email</label>
                <input type="text" id="username" name="username" required>
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <input type="password" id="password" name="password" required>
            </div>

            <button type="submit" class="login-btn" id="loginBtn">
                Iniciar Sesión
            </button>
        </form>

        <div class="loading" id="loading">
            Iniciando sesión...
        </div>

        <div class="retry-info" id="retryInfo"></div>

        <div class="back-link">
            <a href="/">← Volver al sitio web</a>
        </div>
    </div>

    <script>
        const form = document.getElementById('loginForm');
        const errorMessage = document.getElementById('errorMessage');
        const warningMessage = document.getElementById('warningMessage');
        const rateLimitMessage = document.getElementById('rateLimitMessage');
        const rateLimitText = document.getElementById('rateLimitText');
        const rateLimitTimer = document.getElementById('rateLimitTimer');
        const progressBar = document.getElementById('progressBar');
        const progressFill = document.getElementById('progressFill');
        const loginBtn = document.getElementById('loginBtn');
        const loading = document.getElementById('loading');
        const retryInfo = document.getElementById('retryInfo');
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');

        let rateLimitInterval = null;
        let rateLimitEndTime = null;

        function showError(message) {
            hideAllMessages();
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }

        function showWarning(message) {
            hideAllMessages();
            warningMessage.textContent = message;
            warningMessage.style.display = 'block';
        }

        function showRateLimit(message, retryAfter) {
            hideAllMessages();
            rateLimitText.textContent = message;
            rateLimitMessage.style.display = 'block';
            progressBar.style.display = 'block';
            
            // Configurar el timer
            if (retryAfter) {
                rateLimitEndTime = Date.now() + (retryAfter * 1000);
                startRateLimitTimer();
                disableForm(true);
            }
        }

        function hideAllMessages() {
            errorMessage.style.display = 'none';
            warningMessage.style.display = 'none';
            rateLimitMessage.style.display = 'none';
            retryInfo.style.display = 'none';
            progressBar.style.display = 'none';
        }

        function disableForm(disabled) {
            usernameInput.disabled = disabled;
            passwordInput.disabled = disabled;
            loginBtn.disabled = disabled;
        }

        function setLoading(isLoading) {
            if (isLoading) {
                loginBtn.disabled = true;
                loginBtn.textContent = 'Iniciando...';
                loading.style.display = 'block';
            } else {
                if (!rateLimitEndTime || Date.now() > rateLimitEndTime) {
                    loginBtn.disabled = false;
                    disableForm(false);
                }
                loginBtn.textContent = 'Iniciar Sesión';
                loading.style.display = 'none';
            }
        }

        function startRateLimitTimer() {
            if (rateLimitInterval) {
                clearInterval(rateLimitInterval);
            }

            rateLimitInterval = setInterval(() => {
                const now = Date.now();
                const remaining = Math.max(0, rateLimitEndTime - now);

                if (remaining <= 0) {
                    // Rate limit expirado
                    clearInterval(rateLimitInterval);
                    rateLimitInterval = null;
                    rateLimitEndTime = null;
                    hideAllMessages();
                    disableForm(false);
                    rateLimitTimer.textContent = '';
                    progressFill.style.width = '0%';
                    return;
                }

                // Actualizar timer y progress bar
                const seconds = Math.ceil(remaining / 1000);
                rateLimitTimer.textContent = formatTime(seconds);
                
                // Calcular progreso (asumiendo que empezamos desde el retryAfter original)
                const totalTime = (rateLimitEndTime - (Date.now() - remaining));
                const progress = ((totalTime - remaining) / totalTime) * 100;
                progressFill.style.width = `${Math.min(100, Math.max(0, progress))}%`;

            }, 100); // Actualizar cada 100ms para suavidad
        }

        function formatTime(seconds) {
            if (seconds < 60) {
                return `${seconds}s`;
            } else {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                return `${minutes}m ${remainingSeconds}s`;
            }
        }

        function showRetryInfo(attempt, delay, retryAfter) {
            retryInfo.textContent = `Reintentando automáticamente... (intento ${attempt})`;
            retryInfo.style.display = 'block';
        }

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            hideAllMessages();
            setLoading(true);

            const formData = new FormData(form);
            const username = formData.get('username');
            const password = formData.get('password');

            try {
                const response = await fetch('/api/admin/login', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showWarning('¡Inicio de sesión exitoso! Redirigiendo...');
                    setTimeout(() => {
                        window.location.href = '/admin/dashboard';
                    }, 1000);
                } else {
                    // Manejar diferentes tipos de error
                    if (result.rateLimited) {
                        showRateLimit(result.error, result.retryAfter);
                    } else {
                        showError(result.message || result.error || 'Error al iniciar sesión');
                    }
                }
            } catch (error) {
                console.error('Login error:', error);
                showError('Error de conexión. Inténtalo de nuevo.');
            } finally {
                setLoading(false);
            }
        });

        // Limpiar intervalos cuando se cierra la página
        window.addEventListener('beforeunload', () => {
            if (rateLimitInterval) {
                clearInterval(rateLimitInterval);
            }
        });

        // Función para testear rate limiting (solo para desarrollo)
        // Puedes llamarla desde la consola del navegador: testRateLimit()
        window.testRateLimit = function() {
            showRateLimit('Prueba de rate limiting activa', 30);
        };

        // Limpiar mensajes cuando el usuario empiece a escribir de nuevo
        usernameInput.addEventListener('input', () => {
            if (!rateLimitEndTime || Date.now() > rateLimitEndTime) {
                hideAllMessages();
            }
        });

        passwordInput.addEventListener('input', () => {
            if (!rateLimitEndTime || Date.now() > rateLimitEndTime) {
                hideAllMessages();
            }
        });
    </script>
</body>
</html>