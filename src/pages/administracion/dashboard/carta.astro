---
// src/pages/administracion/dashboard/carta.astro
export const prerender = false;

const title = "Editor de Carta - Administraci√≥n";
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #141414;
            color: white;
            min-height: 100vh;
        }

        .dashboard-layout {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
        }

        /* Sidebar (reutilizado del dashboard) */
        .sidebar {
            background: linear-gradient(180deg, rgba(244, 162, 97, 0.1) 0%, rgba(0, 0, 0, 0.9) 100%);
            backdrop-filter: blur(20px);
            border-right: 1px solid rgba(244, 162, 97, 0.2);
            padding: 2rem;
            width: 280px;
            height: 100vh;
            overflow-y: auto;
        }

        .sidebar-header {
            text-align: center;
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 2px solid rgba(244, 162, 97, 0.3);
        }

        .sidebar-title {
            font-size: 1.5rem;
            color: #f4a261;
            font-weight: 300;
            margin-bottom: 0.5rem;
        }

        .sidebar-nav {
            list-style: none;
        }

        .nav-item {
            margin-bottom: 0.5rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 1rem;
            color: white;
            text-decoration: none;
            padding: 1rem;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 500;
            border-left: 3px solid transparent;
        }

        .nav-link:hover,
        .nav-link.active {
            background: rgba(244, 162, 97, 0.1);
            border-left-color: #f4a261;
            transform: translateX(5px);
            color: #f4a261;
        }

        .nav-icon {
            font-size: 1.2rem;
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            margin-left: 280px;
            padding: 2rem;
        }

        .main-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid rgba(244, 162, 97, 0.2);
        }

        .header-left h1 {
            font-size: 2.5rem;
            font-weight: 300;
            color: white;
            margin-bottom: 0.5rem;
        }

        .header-left p {
            color: #ccc;
            opacity: 0.8;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #f4a261, #e76f51);
            color: #141414;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(244, 162, 97, 0.3);
        }

        .btn-secondary {
            background: transparent;
            color: #f4a261;
            border: 1px solid rgba(244, 162, 97, 0.3);
        }

        .btn-secondary:hover {
            background: rgba(244, 162, 97, 0.1);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        /* Editor Container */
        .editor-container {
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(244, 162, 97, 0.2);
            overflow: hidden;
        }

        .editor-tabs {
            display: flex;
            background: rgba(244, 162, 97, 0.1);
            border-bottom: 1px solid rgba(244, 162, 97, 0.2);
        }

        .tab-btn {
            padding: 1rem 2rem;
            background: transparent;
            border: none;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }

        .tab-btn.active {
            background: rgba(244, 162, 97, 0.2);
            color: #f4a261;
            border-bottom-color: #f4a261;
        }

        .tab-content {
            padding: 2rem;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Category Editor */
        .category-list {
            margin-bottom: 2rem;
        }

        .category-item {
            background: rgba(244, 162, 97, 0.05);
            border: 1px solid rgba(244, 162, 97, 0.1);
            border-radius: 10px;
            margin-bottom: 1rem;
            overflow: hidden;
        }

        .category-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .category-header:hover {
            background: rgba(244, 162, 97, 0.1);
        }

        .category-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #f4a261;
        }

        .category-actions {
            display: flex;
            gap: 0.5rem;
        }

        .icon-btn {
            width: 35px;
            height: 35px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .icon-btn.edit {
            background: rgba(52, 152, 219, 0.2);
            color: #3498db;
        }

        .icon-btn.delete {
            background: rgba(231, 76, 60, 0.2);
            color: #e74c3c;
        }

        .icon-btn:hover {
            transform: scale(1.1);
        }

        .category-content {
            padding: 0 1.5rem 1.5rem;
            display: none;
        }

        .category-content.expanded {
            display: block;
        }

        /* Item List */
        .item-list {
            margin-top: 1rem;
        }

        .item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            margin-bottom: 0.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .item-info {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            margin-bottom: 0.3rem;
        }

        .item-description {
            font-size: 0.9rem;
            color: #ccc;
            opacity: 0.8;
        }

        .item-price {
            color: #f4a261;
            font-weight: 700;
            font-size: 1.1rem;
            margin-left: 1rem;
        }

        /* Forms */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: #f4a261;
            font-weight: 500;
        }

        .form-input,
        .form-textarea {
            width: 100%;
            padding: 0.8rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(244, 162, 97, 0.3);
            border-radius: 8px;
            color: white;
            font-size: 1rem;
            resize: vertical;
        }

        .form-input:focus,
        .form-textarea:focus {
            outline: none;
            border-color: #f4a261;
            background: rgba(255, 255, 255, 0.1);
        }

        .form-textarea {
            min-height: 100px;
        }

        /* Loading and Status */
        .status-message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            text-align: center;
        }

        .status-success {
            background: rgba(46, 204, 113, 0.1);
            color: #2ecc71;
            border: 1px solid rgba(46, 204, 113, 0.3);
        }

        .status-error {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            border: 1px solid rgba(231, 76, 60, 0.3);
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 3rem;
            color: #f4a261;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #f4a261;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
            margin-right: 0.5rem;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .dashboard-layout {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                position: relative;
                width: 100%;
                height: auto;
            }
            
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .main-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-layout">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h1 class="sidebar-title">El Palleter</h1>
                <p class="sidebar-subtitle">Panel de Administraci√≥n</p>
            </div>
            
            <nav>
                <ul class="sidebar-nav">
                    <li class="nav-item">
                        <a href="/administracion/dashboard" class="nav-link">
                            <span class="nav-icon">üìä</span>
                            Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/carta" class="nav-link active">
                            <span class="nav-icon">üçΩÔ∏è</span>
                            Carta
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/historia" class="nav-link">
                            <span class="nav-icon">üìñ</span>
                            Historia
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/contacto" class="nav-link">
                            <span class="nav-icon">üìû</span>
                            Contacto
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/configuracion" class="nav-link">
                            <span class="nav-icon">‚öôÔ∏è</span>
                            Configuraci√≥n
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="main-header">
                <div class="header-left">
                    <h1>Editor de Carta</h1>
                    <p>Gestiona los platos, precios y categor√≠as de tu men√∫</p>
                </div>
                <div class="header-actions">
                    <button class="btn btn-secondary" id="previewBtn">
                        üëÅÔ∏è Vista Previa
                    </button>
                    <button class="btn btn-primary" id="saveBtn" disabled>
                        üíæ Guardar Cambios
                    </button>
                </div>
            </div>

            <div id="statusMessage" style="display: none;"></div>

            <div class="editor-container">
                <div class="editor-tabs">
                    <button class="tab-btn active" data-tab="visual">Editor Visual</button>
                    <button class="tab-btn" data-tab="json">Editor JSON</button>
                </div>

                <!-- Visual Editor -->
                <div class="tab-content active" id="visual-tab">
                    <div id="visualEditor">
                        <div class="loading">
                            <span class="spinner"></span>
                            Cargando editor...
                        </div>
                    </div>
                </div>

                <!-- JSON Editor -->
                <div class="tab-content" id="json-tab">
                    <div class="form-group">
                        <label class="form-label">Editar JSON Directamente</label>
                        <textarea 
                            id="jsonEditor" 
                            class="form-textarea" 
                            rows="20"
                            placeholder="Cargando datos..."
                        ></textarea>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        let cartaData = null;
        let hasChanges = false;

        document.addEventListener('DOMContentLoaded', async () => {
            await loadCartaData();
            setupTabs();
            setupSaveButton();
        });

        async function loadCartaData() {
            try {
                const response = await fetch('/api/admin/get-data?section=carta');
                if (!response.ok) {
                    throw new Error('Error cargando datos');
                }
                
                const data = await response.json();
                cartaData = data.content;
                
                renderVisualEditor();
                renderJsonEditor();
                
            } catch (error) {
                console.error('Error loading carta:', error);
                showStatus('Error cargando la carta', 'error');
            }
        }

        function renderVisualEditor() {
            const container = document.getElementById('visualEditor');
            
            if (!cartaData || !cartaData.categories) {
                container.innerHTML = '<p>No hay datos de carta disponibles</p>';
                return;
            }

            let html = '<div class="category-list">';
            
            cartaData.categories.forEach((category, categoryIndex) => {
                html += `
                    <div class="category-item">
                        <div class="category-header" onclick="toggleCategory(${categoryIndex})">
                            <h3 class="category-title">${category.name}</h3>
                            <div class="category-actions">
                                <button class="icon-btn edit" onclick="event.stopPropagation(); editCategory(${categoryIndex})">‚úèÔ∏è</button>
                                <button class="icon-btn delete" onclick="event.stopPropagation(); deleteCategory(${categoryIndex})">üóëÔ∏è</button>
                            </div>
                        </div>
                        <div class="category-content" id="category-${categoryIndex}">
                `;
                
                if (category.sections) {
                    category.sections.forEach((section, sectionIndex) => {
                        html += `
                            <div class="section">
                                <h4 style="color: #f4a261; margin: 1rem 0;">${section.name}</h4>
                                <div class="item-list">
                        `;
                        
                        if (section.items) {
                            section.items.forEach((item, itemIndex) => {
                                html += `
                                    <div class="item">
                                        <div class="item-info">
                                            <div class="item-name">${item.name}</div>
                                            ${item.description ? `<div class="item-description">${item.description}</div>` : ''}
                                        </div>
                                        <div class="item-price">${item.price}</div>
                                        <div class="category-actions" style="margin-left: 1rem;">
                                            <button class="icon-btn edit" onclick="editItem(${categoryIndex}, ${sectionIndex}, ${itemIndex})">‚úèÔ∏è</button>
                                            <button class="icon-btn delete" onclick="deleteItem(${categoryIndex}, ${sectionIndex}, ${itemIndex})">üóëÔ∏è</button>
                                        </div>
                                    </div>
                                `;
                            });
                        }
                        
                        html += `
                                    <button class="btn btn-secondary" onclick="addItem(${categoryIndex}, ${sectionIndex})" style="margin-top: 1rem;">
                                        ‚ûï A√±adir Plato
                                    </button>
                                </div>
                            </div>
                        `;
                    });
                }
                
                html += `
                        </div>
                    </div>
                `;
            });
            
            html += `
                </div>
                <button class="btn btn-primary" onclick="addCategory()" style="margin-top: 2rem;">
                    ‚ûï A√±adir Categor√≠a
                </button>
            `;
            
            container.innerHTML = html;
        }

        function renderJsonEditor() {
            const editor = document.getElementById('jsonEditor');
            editor.value = JSON.stringify(cartaData, null, 2);
            
            editor.addEventListener('input', () => {
                markAsChanged();
            });
        }

        function setupTabs() {
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const tabId = btn.dataset.tab;
                    
                    // Update tab buttons
                    document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    
                    // Update tab content
                    document.querySelectorAll('.tab-content').forEach(content => {
                        content.classList.remove('active');
                    });
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                });
            });
        }

        function setupSaveButton() {
            document.getElementById('saveBtn').addEventListener('click', saveChanges);
        }

        function toggleCategory(index) {
            const content = document.getElementById(`category-${index}`);
            content.classList.toggle('expanded');
        }

        function markAsChanged() {
            hasChanges = true;
            document.getElementById('saveBtn').disabled = false;
        }

        async function saveChanges() {
            try {
                // Get data from active tab
                const activeTab = document.querySelector('.tab-btn.active').dataset.tab;
                let dataToSave;
                
                if (activeTab === 'json') {
                    try {
                        dataToSave = JSON.parse(document.getElementById('jsonEditor').value);
                    } catch (e) {
                        throw new Error('JSON inv√°lido');
                    }
                } else {
                    dataToSave = cartaData;
                }
                
                showStatus('Guardando cambios...', 'info');
                
                const response = await fetch('/api/admin/update-data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        section: 'carta',
                        content: dataToSave
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Error guardando cambios');
                }
                
                hasChanges = false;
                document.getElementById('saveBtn').disabled = true;
                showStatus('Cambios guardados correctamente. El sitio se actualizar√° en unos minutos.', 'success');
                
            } catch (error) {
                console.error('Save error:', error);
                showStatus(error.message || 'Error guardando cambios', 'error');
            }
        }

        function showStatus(message, type) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.className = `status-message status-${type}`;
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            
            if (type === 'success') {
                setTimeout(() => {
                    statusEl.style.display = 'none';
                }, 5000);
            }
        }

        // Placeholder functions for edit operations
        function editCategory(index) {
            alert('Funci√≥n de edici√≥n de categor√≠a en desarrollo');
        }

        function deleteCategory(index) {
            if (confirm('¬øEst√°s seguro de eliminar esta categor√≠a?')) {
                cartaData.categories.splice(index, 1);
                renderVisualEditor();
                renderJsonEditor();
                markAsChanged();
            }
        }

        function addCategory() {
            alert('Funci√≥n de a√±adir categor√≠a en desarrollo');
        }

        function editItem(categoryIndex, sectionIndex, itemIndex) {
            alert('Funci√≥n de edici√≥n de plato en desarrollo');
        }

        function deleteItem(categoryIndex, sectionIndex, itemIndex) {
            if (confirm('¬øEst√°s seguro de eliminar este plato?')) {
                cartaData.categories[categoryIndex].sections[sectionIndex].items.splice(itemIndex, 1);
                renderVisualEditor();
                renderJsonEditor();
                markAsChanged();
            }
        }

        function addItem(categoryIndex, sectionIndex) {
            alert('Funci√≥n de a√±adir plato en desarrollo');
        }

        // Warning before leaving with unsaved changes
        window.addEventListener('beforeunload', (e) => {
            if (hasChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
    </script>
</body>
</html>