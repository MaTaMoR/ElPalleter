---
// src/pages/administracion/dashboard/historia.astro
export const prerender = false;

const title = "Editor de Historia - Administraci√≥n";
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #141414;
            color: white;
            min-height: 100vh;
        }

        .dashboard-layout {
            display: grid;
            grid-template-columns: 280px 1fr;
            min-height: 100vh;
        }

        /* Sidebar (igual que otros editores) */
        .sidebar {
            background: linear-gradient(180deg, rgba(244, 162, 97, 0.1) 0%, rgba(0, 0, 0, 0.9) 100%);
            backdrop-filter: blur(20px);
            border-right: 1px solid rgba(244, 162, 97, 0.2);
            padding: 2rem;
            position: fixed;
            width: 280px;
            height: 100vh;
            overflow-y: auto;
        }

        .sidebar-header {
            text-align: center;
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 2px solid rgba(244, 162, 97, 0.3);
        }

        .sidebar-title {
            font-size: 1.5rem;
            color: #f4a261;
            font-weight: 300;
            margin-bottom: 0.5rem;
        }

        .sidebar-nav {
            list-style: none;
        }

        .nav-item {
            margin-bottom: 0.5rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 1rem;
            color: white;
            text-decoration: none;
            padding: 1rem;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 500;
            border-left: 3px solid transparent;
        }

        .nav-link:hover,
        .nav-link.active {
            background: rgba(244, 162, 97, 0.1);
            border-left-color: #f4a261;
            transform: translateX(5px);
            color: #f4a261;
        }

        .nav-icon {
            font-size: 1.2rem;
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            margin-left: 280px;
            padding: 2rem;
        }

        .main-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
            padding-bottom: 2rem;
            border-bottom: 1px solid rgba(244, 162, 97, 0.2);
        }

        .header-left h1 {
            font-size: 2.5rem;
            font-weight: 300;
            color: white;
            margin-bottom: 0.5rem;
        }

        .header-left p {
            color: #ccc;
            opacity: 0.8;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #f4a261, #e76f51);
            color: #141414;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(244, 162, 97, 0.3);
        }

        .btn-secondary {
            background: transparent;
            color: #f4a261;
            border: 1px solid rgba(244, 162, 97, 0.3);
        }

        .btn-secondary:hover {
            background: rgba(244, 162, 97, 0.1);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        /* Editor Sections */
        .editor-section {
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(244, 162, 97, 0.2);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.5rem;
            color: #f4a261;
            margin-bottom: 1.5rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: #f4a261;
            font-weight: 500;
        }

        .form-input,
        .form-textarea {
            width: 100%;
            padding: 0.8rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(244, 162, 97, 0.3);
            border-radius: 8px;
            color: white;
            font-size: 1rem;
            resize: vertical;
            font-family: inherit;
        }

        .form-input:focus,
        .form-textarea:focus {
            outline: none;
            border-color: #f4a261;
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 0 0 3px rgba(244, 162, 97, 0.1);
        }

        .form-textarea {
            min-height: 120px;
            line-height: 1.6;
        }

        /* Content Paragraphs Editor */
        .content-paragraphs {
            margin-bottom: 2rem;
        }

        .paragraph-item {
            background: rgba(244, 162, 97, 0.05);
            border: 1px solid rgba(244, 162, 97, 0.1);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
            position: relative;
        }

        .paragraph-actions {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            display: flex;
            gap: 0.5rem;
        }

        .icon-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            font-size: 0.8rem;
        }

        .icon-btn.move-up {
            background: rgba(52, 152, 219, 0.2);
            color: #3498db;
        }

        .icon-btn.move-down {
            background: rgba(155, 89, 182, 0.2);
            color: #9b59b6;
        }

        .icon-btn.delete {
            background: rgba(231, 76, 60, 0.2);
            color: #e74c3c;
        }

        .icon-btn:hover {
            transform: scale(1.1);
        }

        /* Image Slider Editor */
        .slider-images {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .image-item {
            background: rgba(244, 162, 97, 0.05);
            border: 1px solid rgba(244, 162, 97, 0.1);
            border-radius: 10px;
            overflow: hidden;
        }

        .image-preview {
            width: 100%;
            height: 200px;
            background: rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-placeholder {
            color: #ccc;
            text-align: center;
            opacity: 0.7;
        }

        .image-info {
            padding: 1rem;
        }

        .image-actions {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        /* File Upload */
        .file-input-wrapper {
            position: relative;
            display: inline-block;
            cursor: pointer;
        }

        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-input-label {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.6rem 1rem;
            background: rgba(52, 152, 219, 0.2);
            color: #3498db;
            border-radius: 6px;
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-input-label:hover {
            background: rgba(52, 152, 219, 0.3);
        }

        /* Status Messages */
        .status-message {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            text-align: center;
        }

        .status-success {
            background: rgba(46, 204, 113, 0.1);
            color: #2ecc71;
            border: 1px solid rgba(46, 204, 113, 0.3);
        }

        .status-error {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
            border: 1px solid rgba(231, 76, 60, 0.3);
        }

        .status-info {
            background: rgba(52, 152, 219, 0.1);
            color: #3498db;
            border: 1px solid rgba(52, 152, 219, 0.3);
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 3rem;
            color: #f4a261;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #f4a261;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
            margin-right: 0.5rem;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .dashboard-layout {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                position: relative;
                width: 100%;
                height: auto;
            }
            
            .main-content {
                margin-left: 0;
                padding: 1rem;
            }
            
            .main-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .slider-images {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard-layout">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h1 class="sidebar-title">El Palleter</h1>
                <p class="sidebar-subtitle">Panel de Administraci√≥n</p>
            </div>
            
            <nav>
                <ul class="sidebar-nav">
                    <li class="nav-item">
                        <a href="/administracion/dashboard" class="nav-link">
                            <span class="nav-icon">üìä</span>
                            Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/carta" class="nav-link">
                            <span class="nav-icon">üçΩÔ∏è</span>
                            Carta
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/historia" class="nav-link active">
                            <span class="nav-icon">üìñ</span>
                            Historia
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/contacto" class="nav-link">
                            <span class="nav-icon">üìû</span>
                            Contacto
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/administracion/dashboard/configuracion" class="nav-link">
                            <span class="nav-icon">‚öôÔ∏è</span>
                            Configuraci√≥n
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="main-header">
                <div class="header-left">
                    <h1>Editor de Historia</h1>
                    <p>Gestiona el contenido y las im√°genes de la secci√≥n historia</p>
                </div>
                <div class="header-actions">
                    <button class="btn btn-secondary" id="previewBtn">
                        üëÅÔ∏è Vista Previa
                    </button>
                    <button class="btn btn-primary" id="saveBtn" disabled>
                        üíæ Guardar Cambios
                    </button>
                </div>
            </div>

            <div id="statusMessage" style="display: none;"></div>

            <!-- T√≠tulos y Subt√≠tulos -->
            <div class="editor-section">
                <h2 class="section-title">üìù T√≠tulos</h2>
                
                <div class="form-group">
                    <label for="historiaTitle" class="form-label">T√≠tulo Principal</label>
                    <input 
                        type="text" 
                        id="historiaTitle" 
                        class="form-input" 
                        placeholder="Nuestra Historia"
                    >
                </div>
                
                <div class="form-group">
                    <label for="historiaSubtitle" class="form-label">Subt√≠tulo</label>
                    <input 
                        type="text" 
                        id="historiaSubtitle" 
                        class="form-input" 
                        placeholder="Desde 1985 en el coraz√≥n de Benissa"
                    >
                </div>
            </div>

            <!-- Contenido de P√°rrafos -->
            <div class="editor-section">
                <h2 class="section-title">üìñ Contenido</h2>
                
                <div class="content-paragraphs" id="contentParagraphs">
                    <div class="loading">
                        <span class="spinner"></span>
                        Cargando contenido...
                    </div>
                </div>
                
                <button class="btn btn-secondary" id="addParagraphBtn">
                    ‚ûï A√±adir P√°rrafo
                </button>
            </div>

            <!-- Slider de Im√°genes -->
            <div class="editor-section">
                <h2 class="section-title">üñºÔ∏è Slider de Im√°genes</h2>
                
                <div class="slider-images" id="sliderImages">
                    <div class="loading">
                        <span class="spinner"></span>
                        Cargando im√°genes...
                    </div>
                </div>
                
                <button class="btn btn-secondary" id="addImageBtn">
                    üì∑ A√±adir Imagen
                </button>
            </div>
        </main>
    </div>

    <script>
        let historiaData = null;
        let hasChanges = false;

        document.addEventListener('DOMContentLoaded', async () => {
            await loadHistoriaData();
            setupEventListeners();
        });

        async function loadHistoriaData() {
            try {
                const response = await fetch('/api/admin/get-data?section=historia');
                if (!response.ok) {
                    throw new Error('Error cargando datos');
                }
                
                const data = await response.json();
                historiaData = data.content;
                
                renderEditor();
                
            } catch (error) {
                console.error('Error loading historia:', error);
                showStatus('Error cargando la historia', 'error');
            }
        }

        function renderEditor() {
            if (!historiaData) return;
            
            // Render t√≠tulos
            document.getElementById('historiaTitle').value = historiaData.title || '';
            document.getElementById('historiaSubtitle').value = historiaData.subtitle || '';
            
            // Render p√°rrafos
            renderParagraphs();
            
            // Render im√°genes del slider
            renderSliderImages();
        }

        function renderParagraphs() {
            const container = document.getElementById('contentParagraphs');
            const paragraphs = historiaData.content || [];
            
            let html = '';
            paragraphs.forEach((paragraph, index) => {
                html += `
                    <div class="paragraph-item" data-index="${index}">
                        <div class="paragraph-actions">
                            <button class="icon-btn move-up" onclick="moveParagraph(${index}, -1)" ${index === 0 ? 'disabled' : ''}>‚Üë</button>
                            <button class="icon-btn move-down" onclick="moveParagraph(${index}, 1)" ${index === paragraphs.length - 1 ? 'disabled' : ''}>‚Üì</button>
                            <button class="icon-btn delete" onclick="deleteParagraph(${index})">üóëÔ∏è</button>
                        </div>
                        <textarea 
                            class="form-textarea" 
                            placeholder="Escribe aqu√≠ el contenido del p√°rrafo..."
                            onchange="updateParagraph(${index}, this.value)"
                        >${paragraph}</textarea>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function renderSliderImages() {
            const container = document.getElementById('sliderImages');
            const images = historiaData.slider_images || [];
            
            let html = '';
            images.forEach((image, index) => {
                html += `
                    <div class="image-item" data-index="${index}">
                        <div class="image-preview">
                            ${image.src ? 
                                `<img src="${image.src}" alt="${image.alt || ''}" />` : 
                                '<div class="image-placeholder">Sin imagen</div>'
                            }
                        </div>
                        <div class="image-info">
                            <div class="image-actions">
                                <div class="file-input-wrapper">
                                    <input 
                                        type="file" 
                                        class="file-input" 
                                        accept="image/*"
                                        onchange="uploadImage(${index}, this.files[0])"
                                    >
                                    <label class="file-input-label">
                                        üì∑ Cambiar Imagen
                                    </label>
                                </div>
                                <button class="icon-btn delete" onclick="deleteImage(${index})">üóëÔ∏è</button>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Descripci√≥n (Alt Text)</label>
                                <input 
                                    type="text" 
                                    class="form-input" 
                                    value="${image.alt || ''}"
                                    placeholder="Describe la imagen..."
                                    onchange="updateImageAlt(${index}, this.value)"
                                >
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Pie de foto</label>
                                <input 
                                    type="text" 
                                    class="form-input" 
                                    value="${image.caption || ''}"
                                    placeholder="Pie de foto visible..."
                                    onchange="updateImageCaption(${index}, this.value)"
                                >
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function setupEventListeners() {
            // T√≠tulos
            document.getElementById('historiaTitle').addEventListener('input', (e) => {
                historiaData.title = e.target.value;
                markAsChanged();
            });
            
            document.getElementById('historiaSubtitle').addEventListener('input', (e) => {
                historiaData.subtitle = e.target.value;
                markAsChanged();
            });
            
            // Botones
            document.getElementById('addParagraphBtn').addEventListener('click', addParagraph);
            document.getElementById('addImageBtn').addEventListener('click', addImage);
            document.getElementById('saveBtn').addEventListener('click', saveChanges);
        }

        function addParagraph() {
            if (!historiaData.content) historiaData.content = [];
            historiaData.content.push('');
            renderParagraphs();
            markAsChanged();
        }

        function updateParagraph(index, value) {
            if (!historiaData.content) historiaData.content = [];
            historiaData.content[index] = value;
            markAsChanged();
        }

        function deleteParagraph(index) {
            if (confirm('¬øEst√°s seguro de eliminar este p√°rrafo?')) {
                historiaData.content.splice(index, 1);
                renderParagraphs();
                markAsChanged();
            }
        }

        function moveParagraph(index, direction) {
            const newIndex = index + direction;
            if (newIndex >= 0 && newIndex < historiaData.content.length) {
                const temp = historiaData.content[index];
                historiaData.content[index] = historiaData.content[newIndex];
                historiaData.content[newIndex] = temp;
                renderParagraphs();
                markAsChanged();
            }
        }

        function addImage() {
            if (!historiaData.slider_images) historiaData.slider_images = [];
            historiaData.slider_images.push({
                src: '',
                alt: '',
                caption: ''
            });
            renderSliderImages();
            markAsChanged();
        }

        function deleteImage(index) {
            if (confirm('¬øEst√°s seguro de eliminar esta imagen?')) {
                historiaData.slider_images.splice(index, 1);
                renderSliderImages();
                markAsChanged();
            }
        }

        function updateImageAlt(index, value) {
            if (!historiaData.slider_images[index]) return;
            historiaData.slider_images[index].alt = value;
            markAsChanged();
        }

        function updateImageCaption(index, value) {
            if (!historiaData.slider_images[index]) return;
            historiaData.slider_images[index].caption = value;
            markAsChanged();
        }

        async function uploadImage(index, file) {
            if (!file) return;
            
            try {
                showStatus('Subiendo imagen...', 'info');
                
                const formData = new FormData();
                formData.append('file', file);
                formData.append('section', 'historia');
                formData.append('index', index);
                
                const response = await fetch('/api/admin/upload-image', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error('Error subiendo imagen');
                }
                
                const result = await response.json();
                
                // Actualizar la imagen en los datos
                if (!historiaData.slider_images[index]) {
                    historiaData.slider_images[index] = {};
                }
                historiaData.slider_images[index].src = result.url;
                
                renderSliderImages();
                markAsChanged();
                showStatus('Imagen subida correctamente', 'success');
                
            } catch (error) {
                console.error('Upload error:', error);
                showStatus('Error subiendo la imagen', 'error');
            }
        }

        function markAsChanged() {
            hasChanges = true;
            document.getElementById('saveBtn').disabled = false;
        }

        async function saveChanges() {
            try {
                showStatus('Guardando cambios...', 'info');
                
                const response = await fetch('/api/admin/update-data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        section: 'historia',
                        content: historiaData
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Error guardando cambios');
                }
                
                hasChanges = false;
                document.getElementById('saveBtn').disabled = true;
                showStatus('Historia actualizada correctamente. El sitio se actualizar√° en unos minutos.', 'success');
                
            } catch (error) {
                console.error('Save error:', error);
                showStatus(error.message || 'Error guardando cambios', 'error');
            }
        }

        function showStatus(message, type) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.className = `status-message status-${type}`;
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            
            if (type === 'success') {
                setTimeout(() => {
                    statusEl.style.display = 'none';
                }, 5000);
            }
        }

        // Warning before leaving with unsaved changes
        window.addEventListener('beforeunload', (e) => {
            if (hasChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });
    </script>
</body>
</html>