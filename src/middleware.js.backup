import { I18nConfig } from './i18n/config.js';

const i18n = I18nConfig.getInstance();

export async function onRequest(context, next) {
  const { url, locals } = context;
  const pathname = url.pathname;
  
  // üîç DEBUG: Ver qu√© est√° pasando
  console.log('üåê Middleware para:', pathname);
  
  // Saltar middleware para rutas administrativas, API y archivos est√°ticos
  if (
    pathname.startsWith('/administracion') || 
    pathname.startsWith('/api') ||
    pathname.startsWith('/images') ||
    pathname.startsWith('/uploads') ||
    pathname.includes('.')
  ) {
    console.log('‚è≠Ô∏è Saltando middleware');
    return next();
  }
  
  // üöÄ CARGAR TRADUCCIONES (importante para tu sistema)
  try {
    await i18n.loadTranslations();
    console.log('üìö Traducciones cargadas');
  } catch (error) {
    console.warn('‚ö†Ô∏è Error cargando traducciones:', error);
  }
  
  // Detectar idioma usando tu m√©todo
  const { locale, cleanPath } = i18n.detectLocaleFromPath(pathname);
  
  console.log('üåç Idioma detectado:', locale, 'cleanPath:', cleanPath);
  
  // Guardar informaci√≥n en locals (para usar en componentes)
  locals.locale = locale;
  locals.cleanPath = cleanPath;
  locals.localeInfo = i18n.getLocaleInfo(locale);
  locals.isDefaultLocale = locale === i18n.getDefaultLocale();
  
  // üîß CLAVE: Reescribir la URL para idiomas no-defecto
  if (locale !== i18n.getDefaultLocale() && pathname !== cleanPath) {
    console.log('üîÑ Reescribiendo URL de', pathname, 'a', cleanPath);
    
    // Crear nueva URL apuntando al archivo correcto
    const newUrl = new URL(cleanPath, url.origin);
    
    // Crear nueva request
    const newRequest = new Request(newUrl, {
      method: context.request.method,
      headers: context.request.headers,
      body: context.request.body
    });
    
    // Reemplazar request y URL en el contexto
    Object.defineProperty(context, 'request', {
      value: newRequest,
      writable: false
    });
    Object.defineProperty(context, 'url', {
      value: newUrl,
      writable: false
    });
  }
  
  // Continuar con la request
  const response = await next();
  
  // A√±adir header de idioma
  response.headers.set('Content-Language', locale);
  
  console.log('‚úÖ Middleware completado:', locale);
  return response;
}